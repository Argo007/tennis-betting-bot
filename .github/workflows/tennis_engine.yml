name: Tennis Engine (Backtest + Live + CLV + Dashboard)

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "choose what to run"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - backtest
          - live
      min_edge:
        description: "edge threshold (e.g. 0.05)"
        required: false
        default: "0.05"
      kelly_scale:
        description: "kelly scale"
        required: false
        default: "0.5"
      bankroll:
        description: "starting bankroll"
        required: false
        default: "1000"
      matrix_bands:
        description: "matrix backtest bands"
        required: false
        default: "2.0,2.6|2.6,3.2|3.2,4.0"
      max_frac:
        description: "max % bankroll per bet"
        required: false
        default: "0.05"
      abs_cap:
        description: "absolute â‚¬ cap"
        required: false
        default: "200"
      simulate_if_missing:
        description: "simulate result if missing"
        required: false
        default: "true"
      notify_if_rows:
        description: "notify if >= rows"
        required: false
        default: "1"

jobs:
  tennis_engine:
    runs-on: ubuntu-latest
    env:
      STATE_DIR: state
      OUTDIR: results
      LIVE_OUTDIR: live_results
      SYNTHETIC: synthetic_picks.csv

    steps:
      # 1. Checkout repo
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # 3. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Generate live value picks
      - name: Generate live value picks
        if: ${{ github.event.inputs.mode == 'all' || github.event.inputs.mode == 'live' }}
        run: |
          python scripts/tennis_value_picks_live.py \
            --odds "${LIVE_OUTDIR}/live_odds.csv" \
            --outdir "${LIVE_OUTDIR}" \
            --min-edge ${{ github.event.inputs.min_edge }}

      # 5. Log live picks
      - name: Log live picks (append to state/trade_log.csv)
        if: ${{ github.event.inputs.mode == 'all' || github.event.inputs.mode == 'live' }}
        run: |
          python scripts/log_live_picks.py \
            --picks "${LIVE_OUTDIR}/picks_live.csv" \
            --state-dir "${STATE_DIR}" \
            --kelly ${{ github.event.inputs.kelly_scale }} \
            --stake-cap ${{ github.event.inputs.abs_cap }} \
            --max-stake-eur ${{ github.event.inputs.abs_cap }} \
            --assume-random-if-missing ${{ github.event.inputs.simulate_if_missing }}

      # 6. Snapshot close odds for CLV
      - name: Snapshot close odds (for CLV)
        run: |
          python scripts/fetch_close_odds.py \
            --odds "${LIVE_OUTDIR}/live_odds.csv" \
            --out "${LIVE_OUTDIR}/close_odds.csv" \
            --max-drift 0.08

      # 7. Settle trades (PnL + CLV + bankroll update)
      - name: Settle trades (PnL + CLV; update bankroll)
        if: ${{ github.event.inputs.mode == 'all' || github.event.inputs.mode == 'live' }}
        run: |
          if [ -f "${STATE_DIR}/trade_log.csv" ]; then
            python scripts/settle_trades.py \
              --log "${STATE_DIR}/trade_log.csv" \
              --out "${STATE_DIR}/settled_trades.csv"
          else
            echo "No trades to settle."
          fi

      # 8. Build dashboard
      - name: Build dashboard
        run: |
          python scripts/make_dashboard.py \
            --state
