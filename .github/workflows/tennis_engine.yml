name: Tennis Engine LIVE (Manual Only)

permissions:
  contents: write
  pages: write
  id-token: write

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "live = generate+log only, all = full pipeline + deploy"
        type: choice
        required: true
        default: "all"
        options: ["all","live"]
      min_edge:
        description: "edge threshold (decimal, e.g., 0.05)"
        required: true
        default: "0.05"
      kelly_scale:
        description: "kelly scale (0.0‚Äì1.0)"
        required: true
        default: "0.50"
      max_frac:
        description: "max % bankroll per bet (e.g., 0.02)"
        required: true
        default: "0.02"
      assume_random_if_missing:
        description: "impute missing odds/results randomly?"
        type: choice
        required: true
        default: "false"
        options: ["false","true"]
      edge_goal:
        description: "Total Edge goal (points)"
        required: true
        default: "8.0"
      top_n:
        description: "Top N picks to show in summary"
        required: true
        default: "15"
      force_edge_strategy:
        description: "fallback only when model columns missing"
        type: choice
        required: true
        default: "none"
        options: ["none","uplift_pct","min_edge"]
      force_edge_uplift_pct:
        description: "when strategy=uplift_pct (e.g. 3 = +3% to implied prob)"
        required: true
        default: "0"

env:
  PYTHON_VERSION: "3.11"

  # paths
  STATE_DIR: ".state"
  DOCS_DIR: "docs"
  SNAPSHOT_DIR: ".state/snapshots"
  PICKS_FILE: "picks_live.csv"
  TRADE_LOG: ".state/trade_log.csv"
  CLOSE_ODDS_FILE: "close_odds.csv"
  DASHBOARD_HTML: "docs/index.html"

  # inputs -> env
  INPUT_MODE: ${{ github.event.inputs.mode }}
  INPUT_MIN_EDGE: ${{ github.event.inputs.min_edge }}
  INPUT_KELLY_SCALE: ${{ github.event.inputs.kelly_scale }}
  INPUT_MAX_FRAC: ${{ github.event.inputs.max_frac }}
  INPUT_ASSUME_RANDOM: ${{ github.event.inputs.assume_random_if_missing }}
  EDGE_GOAL: ${{ github.event.inputs.edge_goal }}
  TOP_N: ${{ github.event.inputs.top_n }}
  FORCE_EDGE_STRATEGY: ${{ github.event.inputs.force_edge_strategy }}
  FORCE_EDGE_UPLIFT_PCT: ${{ github.event.inputs.force_edge_uplift_pct }}

  # optional tunables (uncomment to override script defaults)
  # FINALS_KELLY_SCALE: "0.85"

jobs:
  engine:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy tabulate

      - name: Prepare folders
        run: |
          mkdir -p "${STATE_DIR}" "${DOCS_DIR}" "${SNAPSHOT_DIR}" scripts
          [ -f "${TRADE_LOG}" ] || echo "ts,match,selection,odds,edge,stake" > "${TRADE_LOG}"
          [ -f "${DOCS_DIR}/.nojekyll" ] || touch "${DOCS_DIR}/.nojekyll"

      - name: Ensure scripts exist (fallbacks only if missing)
        run: |
          if [ ! -f scripts/edge_smith_enrich.py ]; then
            cat > scripts/edge_smith_enrich.py <<'PY'
#!/usr/bin/env python3
import os, math, csv
from pathlib import Path
def fnum(x):
  try:
    s=str(x).strip()
    if s.endswith('%'): return float(s[:-1])/100.0
    return float(s)
  except: return None
def kelly(p,odds):
  try:
    b=odds-1.0; q=1.0-p; f=((b*p)-q)/b
    return max(0.0,f)
  except: return 0.0
def read_csv(p):
  p=Path(p)
  if not p.is_file() or p.stat().st_size==0: return []
  with p.open(newline='') as f: return list(csv.DictReader(f))
def write_csv(p,rows,cols):
  Path(p).parent.mkdir(parents=True, exist_ok=True)
  with open(p,'w',newline='') as f:
    w=csv.DictWriter(f,fieldnames=cols); w.writeheader(); w.writerows(rows)
def main():
  picks=os.environ.get("PICKS_FILE","picks_live.csv")
  rows=read_csv(picks)
  if not rows: return
  cols=list(rows[0].keys())
  for k in ("match","selection","implied_p","edge","kelly_stake"):
    if k not in cols: cols.append(k)
  ks=float(os.environ.get("KELLY_SCALE","0.5") or 0.5)
  mf=float(os.environ.get("INPUT_MAX_FRAC","0.02") or 0.02)
  br=float(os.environ.get("BANKROLL","1000") or 1000.0)
  for r in rows:
    odds=fnum(r.get("odds")); mc=fnum(r.get("model_conf"))
    if odds and odds>0: r["implied_p"]=f"{1.0/odds:.6f}"
    else: r["implied_p"]=""
    edge=None
    if odds and mc is not None: edge=mc - (1.0/odds)
    r["edge"]=f"{edge:.6f}" if edge is not None else ""
    stake=0.0
    if edge is not None and mc is not None and odds and odds>1.0:
      k=kelly(mc,odds)*ks
      stake=min(br*mf, max(0.0, br*k))
    r["kelly_stake"]=f"{stake:.2f}"
    r["match"]=r.get("match") or (r.get("player","")+" vs "+(r.get("opponent",""))) or "‚Äî"
    r["selection"]=r.get("selection") or r.get("player") or "‚Äî"
  write_csv(picks, rows, cols)
  print(f"Enriched {len(rows)} rows.")
if __name__=="__main__": main()
PY
          fi

          if [ ! -f scripts/make_dashboard.py ]; then
            cat > scripts/make_dashboard.py <<'PY'
#!/usr/bin/env python3
import os, csv
from pathlib import Path
from datetime import datetime
SD=os.environ.get("STATE_DIR",".state"); DOCS=os.environ.get("DOCS_DIR","docs")
HTML=os.environ.get("DASHBOARD_HTML", os.path.join(DOCS,"index.html"))
PICKS=os.environ.get("PICKS_FILE","picks_live.csv")
TRADE=os.path.join(SD,"trade_log.csv")
SETTLED=os.path.join(SD,"settled_trades.csv")
GOAL=float(os.environ.get("EDGE_GOAL","8.0") or 8.0)
def read(p):
  try:
    if (not os.path.isfile(p)) or os.path.getsize(p)==0: return []
    return list(csv.DictReader(open(p)))
  except: return []
def fnum(x):
  try:
    s=str(x).strip()
    if s.endswith('%'): return float(s[:-1])/100.0
    return float(s)
  except: return None
def td(s): return f"<td>{s}</td>"
def table(rows, cols):
  if not rows: return "<i>(none)</i>"
  head="<tr>"+ "".join(f"<th>{c}</th>" for c in cols)+"</tr>"
  body=[]
  for r in rows:
    body.append("<tr>"+ "".join(td(r.get(c,"")) for c in cols)+"</tr>")
  return f"<table>{head}{''.join(body)}</table>"
def bucket(e):
  try:
    e=float(e)
    if e>=0.05: return "üü¢"
    if e>=0.02: return "üü°"
    if e<0: return "üî¥"
  except: pass
  return "‚ö™Ô∏è"
def main():
  picks=read(PICKS); trades=read(TRADE); settled=read(SETTLED)
  total_edge=0.0; total_kelly=0.0; top=[]
  for r in picks:
    e=fnum(r.get("edge")); k=fnum(r.get("kelly_stake")); o=fnum(r.get("odds")); ip=fnum(r.get("implied_p"))
    total_edge += (e or 0.0); total_kelly += (k or 0.0)
    top.append({
      "üè∑": bucket(e),
      "match": r.get("match","‚Äî"),
      "selection": r.get("selection","‚Äî"),
      "odds": f"{o:.2f}" if o else (r.get("odds") or ""),
      "implied_p": f"{(ip*100):.1f}%" if ip else "",
      "edge": f"{e:.4f}" if e is not None else "",
      "kelly‚Ç¨": f"{k:.2f}" if k else "",
    })
  top=sorted(top, key=lambda x: float(x.get("edge") or -1e9), reverse=True)[:20]
  total_pts=total_edge*100; prog=int(max(0,min(100,(total_pts/GOAL)*100))) if GOAL>0 else 0
  bar="‚ñà"*(prog//10)+"‚ñë"*(10-prog//10)
  now=datetime.utcnow().strftime("%Y-%m-%d %H:%M:%SZ")
  css="""
  body{font-family:system-ui,Segoe UI,Arial,sans-serif;max-width:950px;margin:2rem auto;padding:0 1rem}
  table{border-collapse:collapse;width:100%;margin:.5rem 0}
  th,td{border:1px solid #ddd;padding:6px 8px;font-size:14px}
  th{background:#f6f6f6;text-align:left}
  .progress{font-family:monospace}
  """
  html=f"""<!doctype html><meta charset="utf-8"><title>Tennis Engine ‚Äî Dashboard</title>
  <style>{css}</style>
  <h1>Tennis Engine ‚Äî Run Summary <span style='color:#666;font-size:14px'>({now})</span></h1>
  <p><b>Total Edge:</b> {total_pts:.2f} pts / Goal {GOAL:.2f}
     <span class="progress"> {bar} {prog}%</span> ‚Ä¢ <b>Total Kelly:</b> ‚Ç¨{total_kelly:.2f}</p>
  <h2>üî• Top Picks by Edge</h2>{table(top,["üè∑","match","selection","odds","implied_p","edge","kelly‚Ç¨"])}
  <h2>Last 20 Trades</h2>{table(read(TRADE)[-20:],["ts","match","selection","odds","edge","stake"])}
  <h2>Last 20 Settlements</h2>{table(read(SETTLED)[-20:],["ts","match","selection","odds","edge","stake","result","pnl","clv"])}
  """
  Path(DOCS).mkdir(parents=True, exist_ok=True)
  Path(HTML).write_text(html, encoding="utf-8")
  print(f"Wrote dashboard -> {HTML}")
if __name__=="__main__": main()
PY
          fi

      - name: Stamp run
        run: echo "RUN_TS=$(date -u +'%Y%m%d%H%M%S')" >> "$GITHUB_ENV"

      - name: Compute bankroll + max stake
        id: bankroll
        run: |
          python - <<'PY'
          import os, json, pathlib
          p = pathlib.Path(os.environ['STATE_DIR']) / 'bankroll.json'
          mf = float(os.environ['INPUT_MAX_FRAC'])
          br = 1000.0
          if p.is_file():
              try: br = float(json.load(open(p)).get('bankroll', br))
              except: pass
          ms = round(br * mf, 2)
          with open(os.environ['GITHUB_OUTPUT'],'a') as f:
              f.write(f"bankroll={br}\n")
              f.write(f"max_stake={ms}\n")
          print(f"Bankroll={br}  max_frac={mf}  MAX_STAKE_EUR={ms}")
          PY

      - name: Export bankroll envs
        run: |
          echo "BANKROLL=${{ steps.bankroll.outputs.bankroll }}" >> "$GITHUB_ENV"
          echo "MAX_STAKE_EUR=${{ steps.bankroll.outputs.max_stake }}" >> "$GITHUB_ENV"
          echo "KELLY_SCALE=${{ env.INPUT_KELLY_SCALE }}" >> "$GITHUB_ENV"
          echo "MIN_EDGE=${{ env.INPUT_MIN_EDGE }}" >> "$GITHUB_ENV"

      - name: Generate picks (if generator exists)
        if: env.INPUT_MODE == 'all' || env.INPUT_MODE == 'live'
        continue-on-error: true
        run: |
          if [ -f tennis_value_picks_pro.py ]; then
            python tennis_value_picks_pro.py --out "${PICKS_FILE}" || true
          elif [ -f generate_picks.py ]; then
            python generate_picks.py --out "${PICKS_FILE}" || true
          else
            echo "Generator not found; keeping existing ${PICKS_FILE}."
          fi
          [ -f "${PICKS_FILE}" ] || echo "date,player,opponent,odds,model_conf" > "${PICKS_FILE}"

      - name: Enrich with EdgeSmith (edge + Kelly)
        run: python scripts/edge_smith_enrich.py

      - name: Log live picks to trade_log.csv
        if: env.INPUT_MODE == 'all' || env.INPUT_MODE == 'live'
        run: |
          python - <<'PY'
          import os, csv, time, pathlib
          picks=os.environ['PICKS_FILE']; log=os.environ['TRADE_LOG']
          run_ts=os.environ.get('RUN_TS') or str(int(time.time()))
          p=pathlib.Path(picks)
          if (not p.is_file()) or p.stat().st_size==0: raise SystemExit(0)
          rows=list(csv.DictReader(open(picks)))
          if not rows: raise SystemExit(0)
          if not pathlib.Path(log).is_file():
            with open(log,'w',newline='') as f:
              csv.writer(f).writerow(["ts","match","selection","odds","edge","stake"])
          out=[]
          for r in rows:
            ts=(r.get("ts") or "").strip() or run_ts
            out.append([ts, r.get("match","‚Äî"), r.get("selection","‚Äî"),
                        r.get("odds",""), r.get("edge",""), r.get("kelly_stake","")])
          with open(log,'a',newline='') as f: csv.writer(f).writerows(out)
          print(f"Appended {len(out)} rows to {log}")
          PY

      - name: Snapshot close odds (CLV)
        if: env.INPUT_MODE == 'all'
        run: |
          if [ -f "${CLOSE_ODDS_FILE}" ]; then
            stamp="$(date -u +'%Y%m%d%H%M%SZ')"
            cp "${CLOSE_ODDS_FILE}" "${SNAPSHOT_DIR}/close_odds_${stamp}.csv"
            echo "Snapshot saved."
          else
            echo "No ${CLOSE_ODDS_FILE}; skip."
          fi

      - name: Settle trades (PnL + CLV; update bankroll)
        if: env.INPUT_MODE == 'all'
        run: |
          if [ -f "${STATE_DIR}/trade_log.csv" ] && [ -f settle_trades.py ]; then
            python settle_trades.py \
              --log "${STATE_DIR}/trade_log.csv" \
              --state-dir "${STATE_DIR}" \
              --assume-random-if-missing "${INPUT_ASSUME_RANDOM}" \
              --out "${STATE_DIR}/settled_trades.csv"
          else
            echo "No trade_log or no settle_trades.py; skip settlement."
          fi

      - name: Build dashboard (HTML)
        if: env.INPUT_MODE == 'all'
        run: python scripts/make_dashboard.py

      - name: Results summary (Actions view)
        run: |
          python - <<'PY'
          import os, csv
          def read(p):
            try:
              if (not os.path.isfile(p)) or os.path.getsize(p)==0: return []
              return list(csv.DictReader(open(p)))
            except: return []
          def fnum(x):
            try:
              s=str(x).strip()
              if s.endswith('%'): return float(s[:-1])/100.0
              return float(s)
            except: return None
          picks=read(os.environ['PICKS_FILE'])
          sd=os.environ['STATE_DIR']; trades=read(os.path.join(sd,'trade_log.csv'))
          rows=[]; tot_e=0.0; tot_k=0.0
          for r in picks:
            e=fnum(r.get("edge")); k=fnum(r.get("kelly_stake")); o=fnum(r.get("odds")); ip=fnum(r.get("implied_p"))
            if e is not None: tot_e += e
            if k: tot_k += k or 0.0
            rows.append({
              "match": r.get("match","‚Äî"), "selection": r.get("selection","‚Äî"),
              "odds": f"{o:.2f}" if o else r.get("odds",""),
              "implied_p": f"{(ip*100):.1f}%" if ip else "",
              "edge": f"{e:.4f}" if e is not None else "", "kelly‚Ç¨": f"{k:.2f}" if k else ""
            })
          rows=sorted(rows, key=lambda x: float(x.get("edge") or -9e9), reverse=True)[:int(os.environ.get("TOP_N","15"))]
          def md_table(rows, cols):
            if not rows: return "_(none)_\n"
            out=["| "+" | ".join(cols)+" |","|"+"|".join(["---"]*len(cols))+"|"]
            for r in rows: out.append("| "+" | ".join("" if r.get(c) is None else str(r.get(c)) for c in cols)+" |")
            return "\n".join(out)+"\n"
          edge_goal=float(os.environ.get("EDGE_GOAL","8.0") or 8.0)
          total_pts=(tot_e*100); prog=int(max(0,min(100,(total_pts/edge_goal)*100))) if edge_goal>0 else 0
          bar="‚ñà"*(prog//10)+"‚ñë"*(10-prog//10)
          md=[f"**Total Edge:** {total_pts:.2f} pts / Goal {edge_goal:.2f}  `{bar}` {prog}%  ‚Ä¢  **Total Kelly:** ‚Ç¨{tot_k:.2f}\n"]
          md.append("### üî• Top Picks by Edge\n")
          md.append(md_table(rows, ["match","selection","odds","implied_p","edge","kelly‚Ç¨"]))
          with open(os.environ["GITHUB_STEP_SUMMARY"],"a") as f: f.write("\n".join(md))
          PY

      - name: Commit & push changes
        run: |
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "engine: EdgeSmith enrich + Kelly + dashboard [skip ci]"
            git push
          fi

  deploy_pages:
    if: ${{ github.event.inputs.mode == 'all' }}
    needs: engine
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    concurrency:
      group: "pages"
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure Pages
        uses: actions/configure-pages@v5
      - name: Upload site (docs/)
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
