name: Tennis Engine LIVE (Manual Only)

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "choose what to run"
        type: choice
        required: true
        default: "all"
        options: ["all", "live"]
      min_edge:
        description: "edge threshold (e.g., 0.05)"
        required: true
        default: "0.05"
      kelly_scale:
        description: "kelly scale (0.0â€“1.0)"
        required: true
        default: "0.50"
      max_frac:
        description: "max % bankroll per bet (e.g., 0.02)"
        required: true
        default: "0.02"
      assume_random_if_missing:
        description: "impute missing odds/results randomly?"
        type: choice
        required: true
        default: "false"
        options: ["false", "true"]

env:
  PYTHON_VERSION: "3.11"
  STATE_DIR: ".state"
  DOCS_DIR: "docs"
  SNAPSHOT_DIR: ".state/snapshots"
  PICKS_FILE: "picks_live.csv"
  TRADE_LOG: ".state/trade_log.csv"
  CLOSE_ODDS_FILE: "close_odds.csv"
  DASHBOARD_HTML: "docs/index.html"

  INPUT_MODE: ${{ github.event.inputs.mode }}
  INPUT_MIN_EDGE: ${{ github.event.inputs.min_edge }}
  INPUT_KELLY_SCALE: ${{ github.event.inputs.kelly_scale }}
  INPUT_MAX_FRAC: ${{ github.event.inputs.max_frac }}
  INPUT_ASSUME_RANDOM: ${{ github.event.inputs.assume_random_if_missing }}

jobs:
  engine:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade tabulate
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy
          fi
          pip install --upgrade tabulate

      - name: Prepare folders
        run: |
          mkdir -p "${STATE_DIR}" "${DOCS_DIR}" "${SNAPSHOT_DIR}"
          [ -f "${TRADE_LOG}" ] || echo "ts,match,selection,odds,edge,stake" > "${TRADE_LOG}"

      - name: Generate picks (auto-detect CLI)
        if: env.INPUT_MODE == 'all' || env.INPUT_MODE == 'live'
        run: |
          set -e
          GEN_FAIL=0
          if [ -f tennis_value_picks_pro.py ]; then
            if python tennis_value_picks_pro.py -h 2>&1 | grep -q " --kelly "; then
              python tennis_value_picks_pro.py --kelly "${INPUT_KELLY_SCALE}" --lookahead-h 12 --region all --out "${PICKS_FILE}" || GEN_FAIL=1
            else
              python tennis_value_picks_pro.py --min-edge "${INPUT_MIN_EDGE}" --kelly-scale "${INPUT_KELLY_SCALE}" --max-frac "${INPUT_MAX_FRAC}" --state-dir "${STATE_DIR}" --out "${PICKS_FILE}" || GEN_FAIL=1
            fi
          elif [ -f generate_picks.py ]; then
            python generate_picks.py --min-edge "${INPUT_MIN_EDGE}" --kelly-scale "${INPUT_KELLY_SCALE}" --max-frac "${INPUT_MAX_FRAC}" --state-dir "${STATE_DIR}" --out "${PICKS_FILE}" || GEN_FAIL=1
          else
            GEN_FAIL=1
          fi
          if [ "$GEN_FAIL" = "1" ]; then
            echo "::warning::Pick generator missing/failed; creating placeholder ${PICKS_FILE}"
            echo "ts,match,selection,odds,edge,stake" > "${PICKS_FILE}"
          fi

      - name: Compute MAX_STAKE_EUR
        id: bankroll
        run: |
          TMP=/tmp/compute_bankroll.py
          : > "$TMP"
          echo "import os, json, pathlib" >> "$TMP"
          echo "state=os.environ['STATE_DIR']; mf=float(os.environ['INPUT_MAX_FRAC'])" >> "$TMP"
          echo "p=pathlib.Path(state)/'bankroll.json'; br=1000.0" >> "$TMP"
          echo "if p.is_file():\n  import json as j\n  try: br=float(j.load(open(p)).get('bankroll',br))\n  except: pass" >> "$TMP"
          echo "ms=round(br*mf,2)" >> "$TMP"
          echo "open(os.environ['GITHUB_OUTPUT'],'a').write(f'max_stake={ms}\\n')" >> "$TMP"
          echo "print(f'Bankroll={br} max_frac={mf} MAX_STAKE_EUR={ms}')" >> "$TMP"
          python "$TMP"; rm -f "$TMP"

      - name: Log live picks
        if: env.INPUT_MODE == 'all' || env.INPUT_MODE == 'live'
        run: |
          TMP=/tmp/log_picks.py
          : > "$TMP"
          echo "import os,csv,time,pathlib,sys" >> "$TMP"
          echo "picks=os.environ['PICKS_FILE']; log=os.environ['TRADE_LOG']; ms=float('${{ steps.bankroll.outputs.max_stake }}')" >> "$TMP"
          echo "p=pathlib.Path(picks)" >> "$TMP"
          echo "if (not p.is_file()) or p.stat().st_size==0: sys.exit(0)" >> "$TMP"
          echo "rows=list(csv.DictReader(open(picks)))" >> "$TMP"
          echo "if not rows: sys.exit(0)" >> "$TMP"
          echo "out=[]" >> "$TMP"
          echo "for r in rows:\n  ts=r.get('ts') or str(int(time.time()))" >> "$TMP"
          echo "  try: st=min(float(r.get('stake') or ms), ms)\n  except: st=ms" >> "$TMP"
          echo "  out.append([ts,r.get('match',''),r.get('selection',''),r.get('odds',''),r.get('edge',''),f'{st:.2f}'])" >> "$TMP"
          echo "w=csv.writer(open(log,'a',newline=''))\nw.writerows(out)\nprint(f'Appended {len(out)} rows to {log}')" >> "$TMP"
          python "$TMP"; rm -f "$TMP"

      - name: Snapshot close odds (CLV)
        run: |
          if [ -f "${CLOSE_ODDS_FILE}" ]; then
            stamp="$(date -u +'%Y%m%dT%H%M%SZ')"
            cp "${CLOSE_ODDS_FILE}" "${SNAPSHOT_DIR}/close_odds_${stamp}.csv"
            echo "Snapshot saved."
          else
            echo "No ${CLOSE_ODDS_FILE}; skip."
          fi

      - name: Settle trades (PnL + CLV; update bankroll)
        run: |
          if [ -f "${STATE_DIR}/trade_log.csv" ] && [ -f settle_trades.py ]; then
            python settle_trades.py --log "${STATE_DIR}/trade_log.csv" --state-dir "${STATE_DIR}" --assume-random-if-missing "${INPUT_ASSUME_RANDOM}" --out "${STATE_DIR}/settled_trades.csv"
          else
            echo "No trade_log or settle_trades.py; skip settlement."
          fi

      - name: Build dashboard
        run: |
          if [ -f make_dashboard.py ]; then
            python make_dashboard.py --state-dir "${STATE_DIR}" --out "${DASHBOARD_HTML}"
          else
            echo '<!doctype html><meta charset="utf-8"><title>Tennis Engine</title><h1>Tennis Engine</h1><p>Placeholder dashboard.</p>' > "${DASHBOARD_HTML}"
          fi

      - name: Print summary (last 20 trades)
        run: |
          TMP=/tmp/print_table.py
          : > "$TMP"
          echo "import os,csv,pathlib,sys" >> "$TMP"
          echo "p=os.environ['TRADE_LOG']; P=pathlib.Path(p)" >> "$TMP"
          echo "if (not P.is_file()) or P.stat().st_size==0: print('No trades logged.'); sys.exit(0)" >> "$TMP"
          echo "rows=list(csv.DictReader(open(p)))[-20:]" >> "$TMP"
          echo "from tabulate import tabulate; print(tabulate(rows, headers='keys', tablefmt='github'))" >> "$TMP"
          python "$TMP"; rm -f "$TMP"

      - name: Commit & push changes to main
        run: |
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "engine: update state+dashboard [skip ci]"
            git push
          fi

