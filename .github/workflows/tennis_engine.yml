name: Tennis Engine (Backtest + Live + CLV + Dashboard)

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Choose what to run"
        required: false
        default: "all"
        type: choice
        options: [all, backtest, live]
  schedule:
    - cron: "0 */6 * * *"     # backtest every 6 hours
    - cron: "*/30 * * * *"    # live every 30 minutes

permissions:
  contents: write   # we auto-commit state/docs
  actions: read

concurrency:
  group: tennis-engine-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.10"
  MIN_EDGE: "0.08"
  KELLY_SCALE: "0.5"
  BANKROLL: "1000"
  BANDS: "2.0,2.6|2.6,3.2|3.2,4.0"
  OUTDIR: results
  LIVE_OUTDIR: live_results
  STATE_DIR: state
  DOCS_DIR: docs

jobs:
  engine:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      - name: Ensure directories
        run: |
          mkdir -p "${OUTDIR}" "${LIVE_OUTDIR}" "${STATE_DIR}" "${DOCS_DIR}"

      # ---------- BACKTEST LANE ----------
      - name: Fetch historical tennis data (robust)
        if: ${{ github.event.inputs.mode != 'live' }}
        run: |
          if [ -f scripts/fetch_tennis_data.py ]; then
            python scripts/fetch_tennis_data.py --outdir "${OUTDIR}" || true
          else
            echo "scripts/fetch_tennis_data.py missing → creating stub tennis_data.csv"
            printf '%s\n' 'match_id,player_a,player_b,odds,p,result,price,p_model' > "${OUTDIR}/tennis_data.csv"
          fi

      - name: Generate value picks (historical)
        if: ${{ github.event.inputs.mode != 'live' }}
        run: |
          if [ -f scripts/tennis_value_picks_pro.py ]; then
            python scripts/tennis_value_picks_pro.py \
              --input "${OUTDIR}/tennis_data.csv" \
              --outdir "${OUTDIR}" \
              --min-edge "${MIN_EDGE}" || true
          else
            printf '%s\n' 'odds,p,result,price,p_model' > "${OUTDIR}/picks_final.csv"
          fi

      - name: Matrix Kelly backtest
        if: ${{ github.event.inputs.mode != 'live' }}
        run: |
          if [ -f scripts/run_matrix_backtest.py ] && [ -s "${OUTDIR}/picks_final.csv" ]; then
            python scripts/run_matrix_backtest.py \
              --input "${OUTDIR}/picks_final.csv" \
              --outdir "${OUTDIR}" \
              --stake-mode kelly \
              --edge "${MIN_EDGE}" \
              --kelly-scale "${KELLY_SCALE}" \
              --bankroll "${BANKROLL}" \
              --bands "${BANDS}" || true
          else
            echo "Skip matrix backtest (missing script or empty picks)."
          fi

      # ---------- LIVE LANE ----------
      - name: Fetch live matches
        if: ${{ github.event.inputs.mode != 'backtest' }}
        run: |
          if [ -f scripts/fetch_live_matches.py ]; then
            python scripts/fetch_live_matches.py --out "${LIVE_OUTDIR}/live_matches.csv" || true
          else
            printf '%s\n' 'match_id,player_a,player_b,tournament,start_time' > "${LIVE_OUTDIR}/live_matches.csv"
          fi

      - name: Fetch live odds
        if: ${{ github.event.inputs.mode != 'backtest' }}
        run: |
          if [ -f scripts/fetch_live_odds.py ]; then
            python scripts/fetch_live_odds.py \
              --matches "${LIVE_OUTDIR}/live_matches.csv" \
              --out "${LIVE_OUTDIR}/live_odds.csv" || true
          else
            printf '%s\n' 'match_id,book,market,sel,odds,ts' > "${LIVE_OUTDIR}/live_odds.csv"
          fi

      - name: Generate live value picks
        if: ${{ github.event.inputs.mode != 'backtest' }}
        run: |
          if [ -f scripts/tennis_value_picks_live.py ]; then
            python scripts/tennis_value_picks_live.py \
              --odds "${LIVE_OUTDIR}/live_odds.csv" \
              --outdir "${LIVE_OUTDIR}" \
              --min-edge "${MIN_EDGE}" || true
          else
            printf '%s\n' 'match_id,sel,odds,p,edge,price,p_model' > "${LIVE_OUTDIR}/picks_live.csv"
          fi

      - name: Log live picks (size stakes via Kelly)
        if: ${{ github.event.inputs.mode != 'backtest' }}
        run: |
          if [ -f scripts/log_live_picks.py ] && [ -s "${LIVE_OUTDIR}/picks_live.csv" ]; then
            python scripts/log_live_picks.py \
              --picks "${LIVE_OUTDIR}/picks_live.csv" \
              --state-dir "${STATE_DIR}" \
              --kelly "${KELLY_SCALE}" || true
          else
            echo "No live picks to log."
          fi

      # ---------- CLV + SETTLEMENT + STATE ----------
      - name: Produce close odds for CLV
        if: ${{ github.event.inputs.mode != 'backtest' }}
        run: |
          if [ -f scripts/fetch_close_odds.py ]; then
            python scripts/fetch_close_odds.py \
              --matches "${LIVE_OUTDIR}/live_matches.csv" \
              --odds "${LIVE_OUTDIR}/live_odds.csv" \
              --out "${LIVE_OUTDIR}/close_odds.csv" || true
          else
            echo "fetch_close_odds.py missing → skip CLV snapshot."
          fi

      - name: Settle trades (compute PnL + CLV; update bankroll)
        if: ${{ github.event.inputs.mode != 'backtest' }}
        run: |
          if [ -f scripts/settle_trades.py ] && [ -f "${STATE_DIR}/trade_log.csv" ]; then
            python scripts/settle_trades.py \
              --log "${STATE_DIR}/trade_log.csv" \
              --close-odds "${LIVE_OUTDIR}/close_odds.csv" \
              --state-dir "${STATE_DIR}" \
              --assume-random-if-missing || true
          else
            echo "No trade_log or settle_trades.py → skipping settlement."
          fi

      - name: Update persistent bankroll state (from backtest equity if present)
        if: ${{ github.event.inputs.mode != 'live' }}
        run: |
          if [ -f scripts/update_bankroll_state.py ]; then
            python scripts/update_bankroll_state.py \
              --equity "${OUTDIR}/equity_curve.csv" \
              --state-dir "${STATE_DIR}" \
              --initial "${BANKROLL}" || true
          fi

      # ---------- DASHBOARD + OPTIONAL NOTIFY ----------
      - name: Build dashboard
        run: |
          if [ -f scripts/make_dashboard.py ]; then
            python scripts/make_dashboard.py \
              --state-dir "${STATE_DIR}" \
              --results "${OUTDIR}" \
              --live "${LIVE_OUTDIR}" \
              --out "${DOCS_DIR}" || true
          fi

      - name: Notify picks (if env present)
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ -f scripts/notify_picks.py ]; then
            python scripts/notify_picks.py \
              --live-outdir "${LIVE_OUTDIR}" \
              --backtest-outdir "${OUTDIR}" \
              --min-rows 1 || true
          fi

      # ---------- COMMIT STATE & DOCS ----------
      - name: Auto-commit state/results/docs
        run: |
          if [ -f scripts/autocommit_state.py ]; then
            python scripts/autocommit_state.py \
              --paths "${STATE_DIR}" "${OUTDIR}" "${LIVE_OUTDIR}" "${DOCS_DIR}" \
              --message "auto: update state+results+docs" || true
          fi

      # ---------- ARTIFACTS ----------
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: engine_${{ github.run_id }}
          path: |
            ${{ env.OUTDIR }}
            ${{ env.LIVE_OUTDIR }}
            ${{ env.STATE_DIR }}
            ${{ env.DOCS_DIR }}
