name: Tennis Engine LIVE (Manual Only)

# Ensure the token can write. You ALSO must enable this in repo Settings → Actions → Workflow permissions.
permissions:
  contents: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "choose what to run"
        type: choice
        required: true
        default: "all"
        options: ["all", "live"]
      min_edge:
        description: "edge threshold (e.g., 0.05)"
        required: true
        default: "0.05"
      kelly_scale:
        description: "kelly scale (0.0–1.0)"
        required: true
        default: "0.50"
      max_frac:
        description: "max % bankroll per bet (e.g., 0.02)"
        required: true
        default: "0.02"
      assume_random_if_missing:
        description: "impute missing odds/results randomly?"
        type: choice
        required: true
        default: "false"
        options: ["false", "true"]

env:
  PYTHON_VERSION: "3.11"
  STATE_DIR: ".state"
  DOCS_DIR: "docs"
  SNAPSHOT_DIR: ".state/snapshots"
  PICKS_FILE: "picks_live.csv"
  TRADE_LOG: ".state/trade_log.csv"
  CLOSE_ODDS_FILE: "close_odds.csv"
  DASHBOARD_HTML: "docs/index.html"

  INPUT_MODE: ${{ github.event.inputs.mode }}
  INPUT_MIN_EDGE: ${{ github.event.inputs.min_edge }}
  INPUT_KELLY_SCALE: ${{ github.event.inputs.kelly_scale }}
  INPUT_MAX_FRAC: ${{ github.event.inputs.max_frac }}
  INPUT_ASSUME_RANDOM: ${{ github.event.inputs.assume_random_if_missing }}

jobs:
  engine:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade tabulate
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy
          fi
          pip install --upgrade tabulate

      - name: Prepare folders
        run: |
          mkdir -p "${STATE_DIR}" "${DOCS_DIR}" "${SNAPSHOT_DIR}"
          [ -f "${TRADE_LOG}" ] || echo "ts,match,selection,odds,edge,stake" > "${TRADE_LOG}"

      - name: Generate picks (respects inputs; auto-detects CLI)
        if: env.INPUT_MODE == 'all' || env.INPUT_MODE == 'live'
        run: |
          set -e
          GEN_FAIL=0
          if [ -f tennis_value_picks_pro.py ]; then
            if python tennis_value_picks_pro.py -h 2>&1 | grep -q " --kelly "; then
              python tennis_value_picks_pro.py --kelly "${INPUT_KELLY_SCALE}" --lookahead-h 12 --region all --out "${PICKS_FILE}" || GEN_FAIL=1
            else
              python tennis_value_picks_pro.py --min-edge "${INPUT_MIN_EDGE}" --kelly-scale "${INPUT_KELLY_SCALE}" --max-frac "${INPUT_MAX_FRAC}" --state-dir "${STATE_DIR}" --out "${PICKS_FILE}" || GEN_FAIL=1
            fi
          elif [ -f generate_picks.py ]; then
            python generate_picks.py --min-edge "${INPUT_MIN_EDGE}" --kelly-scale "${INPUT_KELLY_SCALE}" --max-frac "${INPUT_MAX_FRAC}" --state-dir "${STATE_DIR}" --out "${PICKS_FILE}" || GEN_FAIL=1
          else
            GEN_FAIL=1
          fi
          if [ "$GEN_FAIL" = "1" ]; then
            echo "::warning::Pick generator failed or missing; creating placeholder ${PICKS_FILE}"
            echo "ts,match,selection,odds,edge,stake" > "${PICKS_FILE}"
          fi

      - name: Compute MAX_STAKE_EUR from bankroll and input max_frac
        id: bankroll
        run: |
          TMP=/tmp/compute_bankroll.py
          : > "$TMP"
          echo "import os, json, pathlib" >> "$TMP"
          echo "state = os.environ['STATE_DIR']" >> "$TMP"
          echo "max_frac = float(os.environ['INPUT_MAX_FRAC'])" >> "$TMP"
          echo "p = pathlib.Path(state) / 'bankroll.json'" >> "$TMP"
          echo "bankroll = 1000.0" >> "$TMP"
          echo "if p.is_file():" >> "$TMP"
          echo "  try: bankroll = float(json.load(open(p)).get('bankroll', bankroll))" >> "$TMP"
          echo "  except Exception: pass" >> "$TMP"
          echo "max_stake = round(bankroll * max_frac, 2)" >> "$TMP"
          echo "open(os.environ['GITHUB_OUTPUT'],'a').write(f'max_stake={max_stake}\\n')" >> "$TMP"
          echo "print(f'Bankroll={bankroll} max_frac={max_frac} MAX_STAKE_EUR={max_stake}')" >> "$TMP"
          python "$TMP"
          rm -f "$TMP"

      - name: Log live picks (append to state/trade_log.csv)
        if: env.INPUT_MODE == 'all' || env.INPUT_MODE == 'live'
        run: |
          TMP=/tmp/log_picks.py
          : > "$TMP"
          echo "import os,csv,time,pathlib,sys" >> "$TMP"
          echo "picks=os.environ['PICKS_FILE']; log=os.environ['TRADE_LOG']; max_stake=float('${{ steps.bankroll.outputs.max_stake }}')" >> "$TMP"
          echo "p=pathlib.Path(picks)" >> "$TMP"
          echo "if (not p.is_file()) or p.stat().st_size==0: sys.exit(0)" >> "$TMP"
          echo "rows=list(csv.DictReader(open(picks)))" >> "$TMP"
          echo "if not rows: sys.exit(0)" >> "$TMP"
          echo "out=[]" >> "$TMP"
          echo "for r in rows:" >> "$TMP"
          echo "  ts=r.get('ts') or str(int(time.time()))" >> "$TMP"
          echo "  try: st=min(float(r.get('stake') or max_stake), max_stake)" >> "$TMP"
          echo "  except: st=max_stake" >> "$TMP"
          echo "  out.append([ts,r.get('match',''),r.get('selection',''),r.get('odds',''),r.get('edge',''),f'{st:.2f}'])" >> "$TMP"
          echo "w=csv.writer(open(log,'a',newline=''))" >> "$TMP"
          echo "w.writerows(out)" >> "$TMP"
          echo "print(f'Appended {len(out)} rows to {log}')" >> "$TMP"
          python "$TMP"
          rm -f "$TMP"

      - name: Snapshot close odds (for CLV)
        run: |
          if [ -f "${CLOSE_ODDS_FILE}" ]; then
            stamp="$(date -u +'%Y%m%dT%H%M%SZ')"
            cp "${CLOSE_ODDS_FILE}" "${SNAPSHOT_DIR}/close_odds_${stamp}.csv"
            echo "Snapshot: ${SNAPSHOT_DIR}/close_odds_${stamp}.csv"
          else
            echo "No ${CLOSE_ODDS_FILE}; skipping CLV snapshot."
          fi

      - name: Settle trades (PnL + CLV; update bankroll)
        run: |
          if [ -f "${STATE_DIR}/trade_log.csv" ] && [ -f settle_trades.py ]; then
            python settle_trades.py \
              --log "${STATE_DIR}/trade_log.csv" \
              --state-dir "${STATE_DIR}" \
              --assume-random-if-missing "${INPUT_ASSUME_RANDOM}" \
              --out "${STATE_DIR}/settled_trades.csv"
          else
            echo "No trade_log or settle_trades.py; skipping real settlement."
          fi

      - name: Build dashboard
        run: |
          if [ -f make_dashboard.py ]; then
            python make_dashboard.py --state-dir "${STATE_DIR}" --out "${DASHBOARD_HTML}"
          else
            echo '<!doctype html><meta charset="utf-8"><title>Tennis Engine</title><h1>Tennis Engine</h1><p>Dashboard generator not found; placeholder page.</p>' > "${DASHBOARD_HTML}"
            echo "Wrote placeholder dashboard."
          fi

      - name: Print summary table (last 20 trades)
        run: |
          TMP=/tmp/print_table.py
          : > "$TMP"
          echo "import os,csv,pathlib,sys" >> "$TMP"
          echo "p=os.environ['TRADE_LOG']" >> "$TMP"
          echo "P=pathlib.Path(p)" >> "$TMP"
          echo "if (not P.is_file()) or P.stat().st_size==0: print('No trades logged.'); sys.exit(0)" >> "$TMP"
          echo "rows=list(csv.DictReader(open(p)))" >> "$TMP"
          echo "rows=rows[-20:]" >> "$TMP"
          echo "from tabulate import tabulate" >> "$TMP"
          echo "print(tabulate(rows, headers='keys', tablefmt='github'))" >> "$TMP"
          python "$TMP"
          rm -f "$TMP"

      - name: Upload state + dashboard artifact
        uses: actions/upload-artifact@v4
        with:
          name: engine-state-and-dashboard
          path: |
            .state/**
            docs/**
            picks_live.csv
          if-no-files-found: warn
          retention-days: 14

      - name: Detect changes
        id: diff
        run: |
          git add -A
          if git diff --cached --quiet; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Commit changes
        if: steps.diff.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -m "tennis_engine: update state and dashboard [skip ci]"

      - name: Create PR with updated state + docs
        if: steps.diff.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v6
        continue-on-error: true   # Don't fail the whole run if repo settings block PRs
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "tennis_engine: update state and dashboard [skip ci]"
          title: "engine: update state and dashboard"
          body: |
            Automated update from Tennis Engine workflow.
            - State: `.state/**`
            - Dashboard: `docs/index.html`
            - Picks: `picks_live.csv`
          branch: bot/engine-state
          branch-suffix: timestamp
          delete-branch: true
          add-paths: |
            .state/**
            docs/**
            picks_live.csv
