name: Tennis Engine (Backtest + Live + CLV + Dashboard)

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Choose what to run"
        required: false
        default: "all"
        type: choice
        options: [all, backtest, live]
      min_edge:
        description: "Edge threshold (e.g., 0.02–0.12)"
        required: false
        default: "0.08"
      kelly_scale:
        description: "Kelly scale (0.25–1.0 typical)"
        required: false
        default: "0.5"
      bankroll:
        description: "Starting bankroll (for backtest and snapshots)"
        required: false
        default: "1000"
      bands:
        description: "Odds bands for matrix backtest"
        required: false
        default: "2.0,2.6|2.6,3.2|3.2,4.0"
      stake_cap:
        description: "Max % of bankroll per bet (e.g., 0.05)"
        required: false
        default: "0.05"
      max_stake_eur:
        description: "Absolute € cap per bet"
        required: false
        default: "200"
      assume_random_if_missing:
        description: "If true, simulate settlement by p when result missing"
        required: false
        default: "true"
      min_rows_for_alert:
        description: "Notify only if >= this many rows"
        required: false
        default: "1"

  schedule:
    - cron: "0 */6 * * *"
    - cron: "*/30 * * * *"

permissions:
  contents: write
  actions: read

concurrency:
  group: tennis-engine-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.10"
  OUTDIR: results
  LIVE_OUTDIR: live_results
  STATE_DIR: state
  DOCS_DIR: docs
  MIN_EDGE: "0.08"
  KELLY_SCALE: "0.5"
  BANKROLL: "1000"
  BANDS: "2.0,2.6|2.6,3.2|3.2,4.0"
  STAKE_CAP: "0.05"
  MAX_STAKE_EUR: "200"
  ASSUME_RANDOM: "true"
  MIN_ROWS_FOR_ALERT: "1"

jobs:
  engine:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install pandas || true

      - name: Ensure directories
        run: |
          mkdir -p "${OUTDIR}" "${LIVE_OUTDIR}" "${STATE_DIR}" "${DOCS_DIR}"

      # Resolve inputs → env for this run
      - name: Resolve inputs -> env
        run: |
          echo "MODE=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.mode || 'all' }}" >> "$GITHUB_ENV"
          echo "MIN_EDGE=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.min_edge || env.MIN_EDGE }}" >> "$GITHUB_ENV"
          echo "KELLY_SCALE=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.kelly_scale || env.KELLY_SCALE }}" >> "$GITHUB_ENV"
          echo "BANKROLL=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.bankroll || env.BANKROLL }}" >> "$GITHUB_ENV"
          echo "BANDS=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.bands || env.BANDS }}" >> "$GITHUB_ENV"
          echo "STAKE_CAP=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.stake_cap || env.STAKE_CAP }}" >> "$GITHUB_ENV"
          echo "MAX_STAKE_EUR=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.max_stake_eur || env.MAX_STAKE_EUR }}" >> "$GITHUB_ENV"
          echo "ASSUME_RANDOM=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.assume_random_if_missing || env.ASSUME_RANDOM }}" >> "$GITHUB_ENV"
          echo "MIN_ROWS_FOR_ALERT=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.min_rows_for_alert || env.MIN_ROWS_FOR_ALERT }}" >> "$GITHUB_ENV"

      # ---------- BACKTEST ----------
      - name: Fetch historical tennis data
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.mode != 'live' }}
        run: |
          python scripts/fetch_tennis_data.py --outdir "${OUTDIR}" || true

      - name: Generate value picks (historical)
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.mode != 'live' }}
        run: |
          python scripts/tennis_value_picks_pro.py \
            --input "${OUTDIR}/tennis_data.csv" \
            --outdir "${OUTDIR}" \
            --min-edge "${MIN_EDGE}" || true

      - name: Matrix Kelly backtest
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.mode != 'live' }}
        run: |
          if [ -s "${OUTDIR}/picks_final.csv" ]; then
            python scripts/run_matrix_backtest.py \
              --input "${OUTDIR}/picks_final.csv" \
              --outdir "${OUTDIR}" \
              --stake-mode kelly \
              --edge "${MIN_EDGE}" \
              --kelly-scale "${KELLY_SCALE}" \
              --bankroll "${BANKROLL}" \
              --bands "${BANDS}" || true
          else
            echo "No historical picks; skipping backtest."
          fi

      # ---------- LIVE ----------
      - name: Fetch live matches
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.mode != 'backtest' }}
        run: |
          python scripts/fetch_live_matches.py --out "${LIVE_OUTDIR}/live_matches.csv" || true

      - name: Fetch live odds
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.mode != 'backtest' }}
        run: |
          python scripts/fetch_live_odds.py \
            --matches "${LIVE_OUTDIR}/live_matches.csv" \
            --out "${LIVE_OUTDIR}/live_odds.csv" || true

      - name: Generate live value picks
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.mode != 'backtest' }}
        run: |
          python scripts/tennis_value_picks_live.py \
            --odds "${LIVE_OUTDIR}/live_odds.csv" \
            --outdir "${LIVE_OUTDIR}" \
            --min-edge "${MIN_EDGE}" || true

      # >>>> Fallback to guarantee picks when empty <<<<
      - name: Fallback — create synthetic live picks when none
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.mode != 'backtest' }}
        run: |
          python scripts/fill_with_synthetic_live.py \
            --outdir "${LIVE_OUTDIR}" \
            --min-edge "${MIN_EDGE}" || true

      - name: Log live picks (Kelly-sized)
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.mode != 'backtest' }}
        run: |
          if [ -s "${LIVE_OUTDIR}/picks_live.csv" ]; then
            python scripts/log_live_picks.py \
              --picks "${LIVE_OUTDIR}/picks_live.csv" \
              --state-dir "${STATE_DIR}" \
              --kelly "${KELLY_SCALE}" \
              --max-stake-eur "${MAX_STAKE_EUR}" \
              --stake-cap "${STAKE_CAP}" || true
          else
            echo "No live picks to log."
          fi

      # ---------- CLV + SETTLEMENT + STATE ----------
      - name: Produce close odds for CLV
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.mode != 'backtest' }}
        run: |
          python scripts/fetch_close_odds.py \
            --matches "${LIVE_OUTDIR}/live_matches.csv" \
            --odds "${LIVE_OUTDIR}/live_odds.csv" \
            --out "${LIVE_OUTDIR}/close_odds.csv" || true

      - name: Settle trades (compute PnL + CLV; update bankroll)
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.mode != 'backtest' }}
        run: |
          if [ -f "${STATE_DIR}/trade_log.csv" ]; then
            python scripts/settle_trades.py \
              --log "${STATE_DIR}/trade_log.csv" \
              --close-odds "${LIVE_OUTDIR}/close_odds.csv" \
              --state-dir "${STATE_DIR}" \
              $([ "${ASSUME_RANDOM}" = "true" ] && echo "--assume-random-if-missing") || true
          else
            echo "No trade_log yet; skipping settlement."
          fi

      - name: Update persistent bankroll state (from backtest equity if present)
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.mode != 'live' }}
        run: |
          python scripts/update_bankroll_state.py \
            --equity "${OUTDIR}/equity_curve.csv" \
            --state-dir "${STATE_DIR}" \
            --initial "${BANKROLL}" || true

      # ---------- DASHBOARD & NOTIFY ----------
      - name: Build dashboard
        run: |
          python scripts/make_dashboard.py \
            --state-dir "${STATE_DIR}" \
            --results "${OUTDIR}" \
            --live "${LIVE_OUTDIR}" \
            --out "${DOCS_DIR}" || true

      - name: Notify picks (if secrets exist)
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          python scripts/notify_picks.py \
            --live-outdir "${LIVE_OUTDIR}" \
            --backtest-outdir "${OUTDIR}" \
            --min-rows "${MIN_ROWS_FOR_ALERT}" || true

      # ---------- COMMIT CHANGES ----------
      - name: Auto-commit state/results/docs
        run: |
          python scripts/autocommit_state.py \
            --paths "${STATE_DIR}" "${OUTDIR}" "${LIVE_OUTDIR}" "${DOCS_DIR}" \
            --message "engine: update state+results+docs" || true

      # ---------- CLEAN JOB SUMMARY ----------
      - name: Print clean summary table
        env:
          OUTDIR: ${{ env.OUTDIR }}
          LIVE_OUTDIR: ${{ env.LIVE_OUTDIR }}
          STATE_DIR: ${{ env.STATE_DIR }}
        run: |
          python scripts/quick_summary.py
