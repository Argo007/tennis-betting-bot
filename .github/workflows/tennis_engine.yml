name: Tennis Engine LIVE (Manual Only)

permissions:
  contents: write
  pages: write
  id-token: write

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "live = generate+log only, all = full pipeline + deploy"
        type: choice
        required: true
        default: "all"
        options: ["all","live"]
      min_edge:
        description: "edge threshold (decimal, e.g., 0.05)"
        required: true
        default: "0.05"
      kelly_scale:
        description: "kelly scale (0.0–1.0)"
        required: true
        default: "0.50"
      max_frac:
        description: "max % bankroll per bet (e.g., 0.02)"
        required: true
        default: "0.02"
      assume_random_if_missing:
        description: "impute missing odds/results randomly?"
        type: choice
        required: true
        default: "false"
        options: ["false","true"]
      edge_goal:
        description: "Total Edge goal (points)"
        required: true
        default: "8.0"
      top_n:
        description: "Top N picks to show"
        required: true
        default: "15"
      force_edge_strategy:
        description: "fallback only if no model columns"
        type: choice
        required: true
        default: "none"
        options: ["none","uplift_pct","min_edge"]
      force_edge_uplift_pct:
        description: "when strategy=uplift_pct (e.g. 3 = +3% to implied prob)"
        required: true
        default: "0"

env:
  PYTHON_VERSION: "3.11"
  STATE_DIR: ".state"
  DOCS_DIR: "docs"
  SNAPSHOT_DIR: ".state/snapshots"
  PICKS_FILE: "picks_live.csv"
  TRADE_LOG: ".state/trade_log.csv"
  CLOSE_ODDS_FILE: "close_odds.csv"
  DASHBOARD_HTML: "docs/index.html"

  INPUT_MODE: ${{ github.event.inputs.mode }}
  INPUT_MIN_EDGE: ${{ github.event.inputs.min_edge }}
  INPUT_KELLY_SCALE: ${{ github.event.inputs.kelly_scale }}
  INPUT_MAX_FRAC: ${{ github.event.inputs.max_frac }}
  INPUT_ASSUME_RANDOM: ${{ github.event.inputs.assume_random_if_missing }}
  EDGE_GOAL: ${{ github.event.inputs.edge_goal }}
  TOP_N: ${{ github.event.inputs.top_n }}
  FORCE_EDGE_STRATEGY: ${{ github.event.inputs.force_edge_strategy }}
  FORCE_EDGE_UPLIFT_PCT: ${{ github.event.inputs.force_edge_uplift_pct }}

jobs:
  engine:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy
          fi
          pip install --upgrade tabulate

      - name: Prepare folders
        run: |
          mkdir -p "${STATE_DIR}" "${DOCS_DIR}" "${SNAPSHOT_DIR}"
          [ -f "${TRADE_LOG}" ] || echo "ts,match,selection,odds,edge,stake" > "${TRADE_LOG}"
          [ -f "${DOCS_DIR}/.nojekyll" ] || touch "${DOCS_DIR}/.nojekyll"

      - name: Stamp run
        run: echo "RUN_TS=$(date -u +'%Y%m%d%H%M%S')" >> "$GITHUB_ENV"

      # If you have a generator script, it will run; if not, we use existing picks_live.csv.
      - name: Generate picks (optional)
        if: env.INPUT_MODE == 'all' || env.INPUT_MODE == 'live'
        continue-on-error: true
        run: |
          if [ -f tennis_value_picks_pro.py ]; then
            python tennis_value_picks_pro.py --out "${PICKS_FILE}" || true
          elif [ -f generate_picks.py ]; then
            python generate_picks.py --out "${PICKS_FILE}" || true
          else
            echo "Using existing ${PICKS_FILE}"
          fi
          [ -f "${PICKS_FILE}" ] || echo "ts,player,opponent,odds,model_conf" > "${PICKS_FILE}"

      - name: Compute bankroll + MAX_STAKE_EUR
        id: bankroll
        run: |
          python - <<'PY'
          import os, json, pathlib
          p = pathlib.Path(os.environ['STATE_DIR']) / 'bankroll.json'
          mf = float(os.environ['INPUT_MAX_FRAC'])
          br = 1000.0
          if p.is_file():
              try: br = float(json.load(open(p)).get('bankroll', br))
              except: pass
          ms = round(br * mf, 2)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"bankroll={br}\n")
              f.write(f"max_stake={ms}\n")
          print(f"Bankroll={br}  max_frac={mf}  MAX_STAKE_EUR={ms}")
          PY

      - name: Peek picks (debug columns)
        if: env.INPUT_MODE == 'all' || env.INPUT_MODE == 'live'
        run: |
          python - <<'PY'
          import csv, os, sys
          fp=os.environ['PICKS_FILE']
          try:
            rows=list(csv.DictReader(open(fp)))
            if rows:
              print("PICKS COLUMNS:", list(rows[0].keys()))
              print("FIRST ROW:", {k: rows[0].get(k) for k in list(rows[0].keys())[:16]})
            else:
              print("PICKS EMPTY")
          except Exception as e:
            print("PICKS READ ERROR:", e)
            sys.exit(0)
          PY

      - name: Enrich picks (names + model_conf ➜ edge + Kelly; fallbacks)
        if: env.INPUT_MODE == 'all' || env.INPUT_MODE == 'live'
        run: |
          python - <<'PY'
          import os, csv, math
          from pathlib import Path

          picks_fp = os.environ['PICKS_FILE']
          if not Path(picks_fp).is_file() or Path(picks_fp).stat().st_size == 0:
            raise SystemExit(0)

          bankroll = float("${{ steps.bankroll.outputs.bankroll }}")
          max_stake = float("${{ steps.bankroll.outputs.max_stake }}")
          kelly_scale = float(os.environ.get('INPUT_KELLY_SCALE','0.5') or 0.5)
          min_edge = float(os.environ.get('INPUT_MIN_EDGE','0.05') or 0.05)
          force_strategy = (os.environ.get('FORCE_EDGE_STRATEGY') or 'none').strip().lower()
          uplift_pct = float(os.environ.get('FORCE_EDGE_UPLIFT_PCT','0') or 0.0)/100.0

          def fnum(x):
            try:
              s=str(x).strip()
              if s.endswith('%'): return float(s[:-1])/100.0
              return float(s)
            except: return None

          def get(row, keys):
            for k in keys:
              if k in row and str(row[k]).strip() != "":
                return str(row[k]).strip()
            return ""

          def infer_names(r):
            sel = get(r, ['selection','selection_name','runner','runner_name','player','team','name','side','bet_selection'])
            opp = get(r, ['opponent','opp','vs','against','away','away_team','player_b','player2','p2'])
            home= get(r, ['match','event','fixture','home','home_team','player_a','player1','p1'])
            if not sel: sel = get(r, ['player','team','name'])
            match = get(r, ['match','event','event_name','fixture','game','market','competition','tournament'])
            if not match and (home or opp):
              match = f"{home} vs {opp}".strip()
            return (match or "—"), (sel or "—")

          def compute_edge_and_stake(r):
            """Use model_conf if present; else infer/force."""
            odds = fnum(r.get('odds'))
            if not (odds and odds>0): return None, 0.0
            implied = 1.0/odds

            # 1) direct edge
            ed = fnum(r.get('edge'))
            if ed is not None:
              if abs(ed) > 1.5: ed = ed/100.0
              p = max(0.0, min(1.0, implied*(1.0+ed)))
            else:
              # 2) model probability names
              p = fnum(r.get('model_conf')) \
                  or fnum(r.get('model_prob')) \
                  or fnum(r.get('prob')) \
                  or fnum(r.get('win_prob')) \
                  or fnum(r.get('p'))
              if p is not None and 0.0 < p < 1.0:
                ed = p - implied
              else:
                # 3) fair odds
                fo = fnum(r.get('fair')) or fnum(r.get('fair_odds')) or fnum(r.get('true_odds')) or fnum(r.get('model_odds'))
                if fo and fo>0:
                  p = 1.0/fo
                  ed = p - implied

            # 4) force strategy only if still None
            if ed is None:
              if force_strategy == 'uplift_pct' and uplift_pct>0:
                p = min(1.0, implied * (1.0 + uplift_pct))
                ed = p - implied
              elif force_strategy == 'min_edge':
                ed = min_edge
                p  = min(1.0, implied * (1.0 + ed))

            # Kelly sizing
            stake=0.0
            if ed is not None and p is not None and 0.0 < p < 1.0:
              b = odds - 1.0
              if b > 0:
                k_full = ((p*b) - (1.0 - p)) / b
                k_full = max(0.0, k_full)
                stake = min(max_stake, bankroll * k_full * kelly_scale)
            return ed, stake

          rows = list(csv.DictReader(open(picks_fp)))
          if not rows: raise SystemExit(0)

          headers = list(rows[0].keys())
          for h in ('match','selection','edge','stake'):
            if h not in headers: headers.append(h)

          kept=0
          for r in rows:
            m,s = infer_names(r)
            r['match']=m; r['selection']=s
            ed, st = compute_edge_and_stake(r)
            r['edge']  = (f"{ed:.6f}" if ed is not None else "")
            r['stake'] = (f"{st:.2f}" if st is not None else "0.00")
            if ed is not None: kept += 1

          with open(picks_fp, 'w', newline='') as f:
            w = csv.DictWriter(f, fieldnames=headers)
            w.writeheader(); w.writerows(rows)

          print(f"Enriched picks: edges computed for {kept}/{len(rows)} rows.")
          PY

      - name: Log live picks (append to trade_log.csv)
        if: env.INPUT_MODE == 'all' || env.INPUT_MODE == 'live'
        run: |
          python - <<'PY'
          import os, csv, time, pathlib, sys
          picks = os.environ['PICKS_FILE']
          log = os.environ['TRADE_LOG']
          run_ts = os.environ.get('RUN_TS') or str(int(time.time()))
          p = pathlib.Path(picks)
          if (not p.is_file()) or p.stat().st_size == 0: sys.exit(0)
          rows = list(csv.DictReader(open(picks)))
          if not rows: sys.exit(0)
          if not pathlib.Path(log).is_file():
            with open(log, 'w', newline='') as f:
              csv.writer(f).writerow(["ts","match","selection","odds","edge","stake"])
          out=[]
          for r in rows:
            ts=(r.get("ts") or "").strip() or run_ts
            out.append([ts, r.get("match","—"), r.get("selection","—"),
                        r.get("odds",""), r.get("edge",""), r.get("stake","")])
          with open(log, "a", newline="") as f: csv.writer(f).writerows(out)
          print(f"Appended {len(out)} rows to {log}")
          PY

      - name: Snapshot close odds (CLV)
        if: env.INPUT_MODE == 'all'
        run: |
          if [ -f "${CLOSE_ODDS_FILE}" ]; then
            stamp="$(date -u +'%Y%m%d%H%M%SZ')"
            cp "${CLOSE_ODDS_FILE}" "${SNAPSHOT_DIR}/close_odds_${stamp}.csv"
            echo "Snapshot saved."
          else
            echo "No ${CLOSE_ODDS_FILE}; skip."
          fi

      - name: Settle trades (PnL + CLV; update bankroll)
        if: env.INPUT_MODE == 'all'
        run: |
          if [ -f "${STATE_DIR}/trade_log.csv" ] && [ -f settle_trades.py ]; then
            python settle_trades.py --log "${STATE_DIR}/trade_log.csv" --state-dir "${STATE_DIR}" --assume-random-if-missing "${INPUT_ASSUME_RANDOM}" --out "${STATE_DIR}/settled_trades.csv"
          else
            echo "No trade_log or settle_trades.py; skip settlement."
          fi

      - name: Build dashboard
        if: env.INPUT_MODE == 'all'
        run: |
          if [ -f make_dashboard.py ]; then
            python make_dashboard.py --state-dir "${STATE_DIR}" --out "${DASHBOARD_HTML}"
          else
            echo '<!doctype html><meta charset="utf-8"><title>Tennis Engine</title><h1>Tennis Engine</h1><p>Placeholder dashboard.</p>' > "${DASHBOARD_HTML}"
          fi

      - name: Results summary (rich)
        continue-on-error: true
        env:
          KELLY_SCALE_INPUT: ${{ env.INPUT_KELLY_SCALE }}
          EDGE_GOAL: ${{ env.EDGE_GOAL }}
          TOP_N: ${{ env.TOP_N }}
        run: |
          python - <<'PY'
          try:
            import os, csv, json
            from datetime import datetime
            sd=os.environ['STATE_DIR']; picks_fp=os.environ['PICKS_FILE']
            log_fp=os.path.join(sd,'trade_log.csv'); set_fp=os.path.join(sd,'settled_trades.csv')
            bank_fp=os.path.join(sd,'bankroll.json'); run_ts=os.environ.get('RUN_TS')
            top_n=int(os.environ.get('TOP_N','15') or 15); goal=float(os.environ.get('EDGE_GOAL','8.0') or 8.0)
            kelly_scale=float(os.environ.get('KELLY_SCALE_INPUT','0.5') or 0.5)

            def read_csv(p):
              if not os.path.isfile(p) or os.path.getsize(p)==0: return []
              return list(csv.DictReader(open(p)))

            def fnum(x):
              try:
                s=str(x).strip()
                if s.endswith('%'): return float(s[:-1])/100.0
                return float(s)
              except: return None

            picks=read_csv(picks_fp); trades=read_csv(log_fp); settled=read_csv(set_fp)
            bankroll=None
            try: bankroll=float(json.load(open(bank_fp)).get('bankroll'))
            except: pass

            new_trades=sum(1 for r in trades if (r.get("ts") or "").strip()==(run_ts or "")) if trades else 0

            total_edge=0.0; total_kelly=0.0
            rows=[]
            for r in picks or []:
              o=fnum(r.get("odds")); e=fnum(r.get("edge")); k=fnum(r.get("stake"))
              if e is not None: total_edge+=e
              if k: total_kelly+=k
              rows.append({
                "🏷": ("🟢" if (e is not None and e>=0.05) else ("🟡" if (e is not None and e>=0.02) else ("🔴" if (e is not None and e<0) else "⚪️"))),
                "match": r.get("match","—"),
                "selection": r.get("selection","—"),
                "odds": f"{o:.2f}" if o else r.get("odds",""),
                "implied_p": f"{(1/o)*100:.1f}%" if o and o>0 else "",
                "edge": f"{e:.4f}" if e is not None else "",
                "kelly€": f"{k:.2f}" if k else "",
              })
            rows=sorted(rows, key=lambda x: float(x.get("edge") or -1e9), reverse=True)
            top_rows=rows[:top_n]; top_pick=top_rows[0] if top_rows else None

            def md_table(rows, cols):
              if not rows: return "_(none)_\n"
              out=["| "+" | ".join(cols)+" |","|"+"|".join(["---"]*len(cols))+"|"]
              for r in rows: out.append("| "+" | ".join("" if r.get(c) is None else str(r.get(c)) for c in cols)+" |")
              return "\n".join(out)+"\n"

            now=datetime.utcnow().strftime("%Y-%m-%d %H:%M:%SZ")
            total_edge_pts=total_edge*100
            prog=int(max(0,min(100,(total_edge_pts/goal)*100))) if goal>0 else 0
            bar="█"*(prog//10)+"░"*(10-prog//10)

            kpis=[]
            if bankroll is not None: kpis.append(f"**Bankroll**: €{bankroll:,.2f}")
            kpis += [f"**New trades this run**: {new_trades}", f"**Total trades**: {len(trades)}",
                     f"**Total Edge**: {total_edge_pts:.2f} pts / **Goal {goal:.2f}**  `{bar}` {prog}%"]
            if total_kelly>0: kpis.append(f"**Total Kelly stake (this picks file)**: €{total_kelly:.2f} @ scale={kelly_scale:g}")

            md=[f"# Tennis Engine — Run Summary ({now})\n", " • ".join(kpis)+"\n"]
            if top_pick:
              md.append("### 🔥 Top Pick\n")
              md.append(f"- {top_pick.get('match','?')} — **{top_pick.get('selection','?')}** @ {top_pick.get('odds','?')}")
              if top_pick.get('edge'): md.append(f"  (edge {top_pick['edge']})")
              if top_pick.get('kelly€'): md.append(f" — **kelly {top_pick['kelly€']}**")
              md.append("\n")
            md.append("## Top Picks by Edge\n")
            md.append(md_table(top_rows, ["🏷","match","selection","odds","implied_p","edge","kelly€"]))
            md.append("## Last 20 Trades (trade_log)\n")
            md.append(md_table(trades[-20:] if trades else [], ["ts","match","selection","odds","edge","stake"]))
            md.append("## Last 20 Settlements\n_(none)_\n")
            md.append("\n**Dashboard**: `docs/index.html` — published by this workflow when mode=all.\n")
            with open(os.environ["GITHUB_STEP_SUMMARY"], "a") as f: f.write("\n".join(md))
          except Exception as e:
            with open(os.environ["GITHUB_STEP_SUMMARY"], "a") as f:
              f.write(f"### Summary generation error\n```\n{e}\n```\n(Workflow continues.)\n")
          PY

      - name: Commit & push changes
        run: |
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "engine: compute edge from model_conf + Kelly + names + docs [skip ci]"
            git push
          fi

  deploy_pages:
    if: ${{ github.event.inputs.mode == 'all' }}
    needs: engine
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    concurrency:
      group: "pages"
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure Pages
        uses: actions/configure-pages@v5
      - name: Upload site (docs/)
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
