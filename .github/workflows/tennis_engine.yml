name: Tennis Engine LIVE (Manual Only)

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "choose what to run"
        type: choice
        required: true
        default: "all"
        options: ["all", "live"]
      min_edge:
        description: "edge threshold (e.g., 0.05)"
        required: true
        default: "0.05"
      kelly_scale:
        description: "kelly scale (0.0‚Äì1.0)"
        required: true
        default: "0.50"
      max_frac:
        description: "max % bankroll per bet (e.g., 0.02)"
        required: true
        default: "0.02"
      assume_random_if_missing:
        description: "impute missing odds/results randomly?"
        type: choice
        required: true
        default: "false"
        options: ["false", "true"]

env:
  PYTHON_VERSION: "3.11"
  STATE_DIR: ".state"
  DOCS_DIR: "docs"
  SNAPSHOT_DIR: ".state/snapshots"
  PICKS_FILE: "picks_live.csv"
  TRADE_LOG: ".state/trade_log.csv"
  CLOSE_ODDS_FILE: "close_odds.csv"
  DASHBOARD_HTML: "docs/index.html"

  INPUT_MODE: ${{ github.event.inputs.mode }}
  INPUT_MIN_EDGE: ${{ github.event.inputs.min_edge }}
  INPUT_KELLY_SCALE: ${{ github.event.inputs.kelly_scale }}
  INPUT_MAX_FRAC: ${{ github.event.inputs.max_frac }}
  INPUT_ASSUME_RANDOM: ${{ github.event.inputs.assume_random_if_missing }}

jobs:
  engine:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade tabulate
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy
          fi
          pip install --upgrade tabulate

      - name: Prepare folders
        run: |
          mkdir -p "${STATE_DIR}" "${DOCS_DIR}" "${SNAPSHOT_DIR}"
          [ -f "${TRADE_LOG}" ] || echo "ts,match,selection,odds,edge,stake" > "${TRADE_LOG}"

      - name: Stamp run (set RUN_TS env)
        run: |
          echo "RUN_TS=$(date -u +'%Y%m%d%H%M%S')" >> "$GITHUB_ENV"

      - name: Generate picks (auto-detect CLI)
        if: env.INPUT_MODE == 'all' || env.INPUT_MODE == 'live'
        run: |
          set -e
          GEN_FAIL=0
          if [ -f tennis_value_picks_pro.py ]; then
            if python tennis_value_picks_pro.py -h 2>&1 | grep -q " --kelly "; then
              python tennis_value_picks_pro.py --kelly "${INPUT_KELLY_SCALE}" --lookahead-h 12 --region all --out "${PICKS_FILE}" || GEN_FAIL=1
            else
              python tennis_value_picks_pro.py --min-edge "${INPUT_MIN_EDGE}" --kelly-scale "${INPUT_KELLY_SCALE}" --max-frac "${INPUT_MAX_FRAC}" --state-dir "${STATE_DIR}" --out "${PICKS_FILE}" || GEN_FAIL=1
            fi
          elif [ -f generate_picks.py ]; then
            python generate_picks.py --min-edge "${INPUT_MIN_EDGE}" --kelly-scale "${INPUT_KELLY_SCALE}" --max-frac "${INPUT_MAX_FRAC}" --state-dir "${STATE_DIR}" --out "${PICKS_FILE}" || GEN_FAIL=1
          else
            GEN_FAIL=1
          fi
          if [ "$GEN_FAIL" = "1" ]; then
            echo "::warning::Pick generator missing/failed; creating placeholder ${PICKS_FILE}"
            echo "ts,match,selection,odds,edge,stake" > "${PICKS_FILE}"
          fi

      - name: Compute MAX_STAKE_EUR
        id: bankroll
        run: |
          python - <<'PY'
          import os, json, pathlib
          state = os.environ['STATE_DIR']
          mf = float(os.environ['INPUT_MAX_FRAC'])
          p = pathlib.Path(state) / 'bankroll.json'
          br = 1000.0
          if p.is_file():
              try:
                  br = float(json.load(open(p)).get('bankroll', br))
              except Exception:
                  pass
          ms = round(br * mf, 2)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"max_stake={ms}\n")
          print(f"Bankroll={br} max_frac={mf} MAX_STAKE_EUR={ms}")
          PY

      - name: Log live picks
        if: env.INPUT_MODE == 'all' || env.INPUT_MODE == 'live'
        run: |
          python - <<'PY'
          import os, csv, time, pathlib, sys
          picks = os.environ['PICKS_FILE']
          log = os.environ['TRADE_LOG']
          run_ts = os.environ.get('RUN_TS') or str(int(time.time()))
          ms = float("${{ steps.bankroll.outputs.max_stake }}")
          p = pathlib.Path(picks)
          if (not p.is_file()) or p.stat().st_size == 0:
              sys.exit(0)
          rows = list(csv.DictReader(open(picks)))
          if not rows:
              sys.exit(0)

          # Ensure trade_log has header
          if not pathlib.Path(log).is_file():
              with open(log, 'w', newline='') as f:
                  csv.writer(f).writerow(["ts","match","selection","odds","edge","stake"])

          out = []
          for r in rows:
              ts = (r.get("ts") or "").strip() or run_ts
              odds = (r.get("odds") or "").strip()
              edge = (r.get("edge") or "").strip()
              try:
                  stake = min(float(r.get("stake") or ms), ms)
              except Exception:
                  stake = ms
              out.append([ts, r.get("match",""), r.get("selection",""), odds, edge, f"{stake:.2f}"])

          with open(log, "a", newline="") as f:
              csv.writer(f).writerows(out)

          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"new_rows={len(out)}\n")
          print(f"Appended {len(out)} rows to {log}")
          PY

      - name: Snapshot close odds (CLV)
        run: |
          if [ -f "${CLOSE_ODDS_FILE}" ]; then
            stamp="$(date -u +'%Y%m%d%H%M%SZ')"
            cp "${CLOSE_ODDS_FILE}" "${SNAPSHOT_DIR}/close_odds_${stamp}.csv"
            echo "Snapshot saved."
          else
            echo "No ${CLOSE_ODDS_FILE}; skip."
          fi

      - name: Settle trades (PnL + CLV; update bankroll)
        run: |
          if [ -f "${STATE_DIR}/trade_log.csv" ] && [ -f settle_trades.py ]; then
            python settle_trades.py --log "${STATE_DIR}/trade_log.csv" --state-dir "${STATE_DIR}" --assume-random-if-missing "${INPUT_ASSUME_RANDOM}" --out "${STATE_DIR}/settled_trades.csv"
          else
            echo "No trade_log or settle_trades.py; skip settlement."
          fi

      - name: Build dashboard
        run: |
          if [ -f make_dashboard.py ]; then
            python make_dashboard.py --state-dir "${STATE_DIR}" --out "${DASHBOARD_HTML}"
          else
            echo '<!doctype html><meta charset="utf-8"><title>Tennis Engine</title><h1>Tennis Engine</h1><p>Placeholder dashboard.</p>' > "${DASHBOARD_HTML}"
          fi

      - name: Results summary (visible in this Actions run)
        env:
          KELLY_SCALE_INPUT: ${{ env.INPUT_KELLY_SCALE }}
        run: |
          python - <<'PY'
          import os, csv, json, math
          from datetime import datetime

          sd = os.environ['STATE_DIR']
          picks_fp = os.environ['PICKS_FILE']
          log_fp   = os.path.join(sd, 'trade_log.csv')
          set_fp   = os.path.join(sd, 'settled_trades.csv')
          bank_fp  = os.path.join(sd, 'bankroll.json')
          dashboard = os.environ['DASHBOARD_HTML']
          run_ts = os.environ.get('RUN_TS')
          kelly_scale = float(os.environ.get('KELLY_SCALE_INPUT','0.5') or 0.5)

          def read_csv(path):
            if not os.path.isfile(path) or os.path.getsize(path) == 0:
              return []
            with open(path, newline='') as f:
              return list(csv.DictReader(f))

          def last_n(rows, n): return rows[-n:] if rows else []

          def fnum(x):
            try: return float(x)
            except: return None

          def safe_key(x, default):
            v = fnum(x)
            return v if v is not None else default

          # bankroll
          bankroll = None
          if os.path.isfile(bank_fp):
            try: bankroll = float(json.load(open(bank_fp)).get('bankroll'))
            except: pass

          picks = read_csv(picks_fp)
          trades = read_csv(log_fp)
          settled = read_csv(set_fp)

          # New trades this run (using RUN_TS)
          new_trades = sum(1 for r in trades if (r.get("ts") or "").strip() == (run_ts or "")) if trades else 0

          # Compute Top Picks + Kelly stake (est.)
          def edge_bucket(e):
            if e is None: return "‚ö™Ô∏è"
            if e >= 0.05: return "üü¢"
            if e >= 0.02: return "üü°"
            if e < 0:     return "üî¥"
            return "‚ö™Ô∏è"

          def kelly_fraction(odds, true_p):
            b = odds - 1.0
            if not (b > 0 and 0 < true_p < 1): return 0.0
            return max(0.0, (b*true_p - (1-true_p)) / b)

          top_rows = []
          total_edge = 0.0
          total_kelly_eur = 0.0

          for r in picks or []:
            odds = fnum(r.get("odds"))
            e = fnum(r.get("edge"))  # decimal (0.05 = 5%)
            implied = (1/odds) if odds and odds>0 else None
            true_p = None
            if implied is not None and e is not None:
              true_p = max(0.0, min(1.0, implied * (1 + e)))
            kf = kelly_fraction(odds, true_p) if (odds and true_p is not None) else 0.0
            kelly_eur = (bankroll or 0.0) * kelly_scale * kf
            if e is not None:
              total_edge += e
            total_kelly_eur += kelly_eur

            top_rows.append({
              "üè∑": edge_bucket(e),
              "match": r.get("match",""),
              "selection": r.get("selection",""),
              "odds": f"{odds:.2f}" if odds is not None else (r.get("odds","") or ""),
              "implied_p": f"{(implied*100):.1f}%" if implied is not None else "",
              "edge": (f"{e:.4f}" if e is not None else ""),
              "kelly‚Ç¨": f"{kelly_eur:.2f}" if kelly_eur>0 else (r.get("stake","") or ""),
            })

          # Sort by numeric edge (missing edge -> very small sentinel so they go last)
          def edge_num(row):
            return safe_key(row.get("edge"), -1e9)
          top_rows = sorted(top_rows, key=edge_num, reverse=True)[:15] if top_rows else []

          # PnL & CLV snapshot from last 20 settlements
          last_set = last_n(settled, 20)
          pnls = [fnum(r.get("pnl")) for r in last_set if fnum(r.get("pnl")) is not None]
          clvs = [fnum(r.get("clv")) for r in last_set if fnum(r.get("clv")) is not None]
          pnl_sum = sum(pnls) if pnls else None
          clv_avg = (sum(clvs)/len(clvs)) if clvs else None

          def md_table(rows, cols):
            if not rows: return "_(none)_\n"
            out = ["| " + " | ".join(cols) + " |", "|" + "|".join(["---"]*len(cols)) + "|"]
            for r in rows:
              out.append("| " + " | ".join("" if r.get(c) is None else str(r.get(c)) for c in cols) + " |")
            return "\n".join(out) + "\n"

          now = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%SZ")
          kpis = []
          if bankroll is not None: kpis.append(f"**Bankroll**: ‚Ç¨{bankroll:,.2f}")
          kpis.append(f"**New trades this run**: {new_trades}")
          kpis.append(f"**Total trades**: {len(trades)}")
          if pnl_sum is not None: kpis.append(f"**PnL (last 20)**: {pnl_sum:+.2f}")
          if clv_avg is not None: kpis.append(f"**Avg CLV (last 20)**: {clv_avg:+.4f}")

          # Total Edge across current picks (goal = 8.0 edge points)
          total_edge_points = total_edge * 100  # percentage points
          goal = 8.0
          prog = int(max(0, min(100, (total_edge_points/goal)*100))) if goal>0 else 0
          bar = "‚ñà"*(prog//10) + "‚ñë"*(10 - prog//10)
          kpis.append(f"**Total Edge**: {total_edge_points:.2f} pts / **Goal 8.00**  `{bar}` {prog}%")

          if bankroll is not None:
            kpis.append(f"**Total Kelly stake (est.)**: ‚Ç¨{total_kelly_eur:.2f} @ scale={kelly_scale:g}")

          md = []
          md.append(f"# Tennis Engine ‚Äî Run Summary ({now})\n")
          md.append(" ‚Ä¢ ".join(kpis) + "\n")

          md.append("## Top Picks by Edge\n")
          md.append(md_table(top_rows, ["üè∑","match","selection","odds","implied_p","edge","kelly‚Ç¨"]))

          md.append("## Last 20 Trades (trade_log)\n")
          md.append(md_table(last_n(trades,20), ["ts","match","selection","odds","edge","stake"]))

          md.append("## Last 20 Settlements\n")
          md.append(md_table(last_set, ["ts","match","selection","odds","edge","stake","result","pnl","clv"]))

          md.append(f"\n**Dashboard**: `docs/index.html` ‚Äî enable GitHub Pages ‚Üí /docs to view it on the web.\n")

          with open(os.environ["GITHUB_STEP_SUMMARY"], "a") as f:
            f.write("\n".join(md))
          PY

      - name: Commit & push changes to main
        run: |
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "engine: update state+dashboard [skip ci]"
            git push
          fi
