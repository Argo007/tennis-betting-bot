name: Tennis Engine LIVE (Cron + Manual)

on:
  workflow_dispatch:
    inputs:
      min_edge:
        description: "Edge threshold (e.g., 0.05)"
        required: false
        default: "0.05"
      kelly_scale:
        description: "Kelly scale (0–1)"
        required: false
        default: "0.5"
      max_frac:
        description: "Max % bankroll per bet (e.g., 0.05)"
        required: false
        default: "0.05"
      abs_cap:
        description: "Absolute € cap per bet"
        required: false
        default: "200"
      simulate:
        description: "Simulate result if missing (true|false)"
        required: false
        default: "true"
  schedule:
    - cron: "5,25,45 * * * *"

jobs:
  engine:
    runs-on: ubuntu-latest
    env:
      STATE_DIR: state
      LIVE_OUTDIR: live_results
      RESULTS_DIR: results
      DOCS_DIR: docs
      KELLY_SCALE: ${{ inputs.kelly_scale || '0.5' }}
      MIN_EDGE: ${{ inputs.min_edge || '0.05' }}
      MAX_FRAC:  ${{ inputs.max_frac  || '0.05' }}
      ABS_CAP:   ${{ inputs.abs_cap   || '200' }}
      SIM_ASSUME: ${{ inputs.simulate || 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install pandas || true
          chmod +x scripts/*.py || true
          mkdir -p "${STATE_DIR}" "${LIVE_OUTDIR}" "${RESULTS_DIR}" "${DOCS_DIR}"

      - name: Fetch live odds
        run: |
          python scripts/fetch_live_matches.py --out "${LIVE_OUTDIR}/live_matches.csv"
          python scripts/fetch_live_odds.py --out "${LIVE_OUTDIR}/live_odds.csv"

      - name: Generate live value picks
        run: |
          python scripts/tennis_value_picks_live.py \
            --odds "${LIVE_OUTDIR}/live_odds.csv" \
            --outdir "${LIVE_OUTDIR}" \
            --min-edge "${MIN_EDGE}"

      - name: Log live picks (append to state/trade_log.csv)
        shell: bash
        run: |
          if [ -f "${LIVE_OUTDIR}/picks_live.csv" ]; then
            MAX_STAKE_EUR=$(python scripts/compute_max_stake.py --state-dir "${STATE_DIR}" --max-frac "${MAX_FRAC}" --fallback 1000)
            echo "MAX_STAKE_EUR=${MAX_STAKE_EUR}"
            python scripts/log_live_picks.py \
              --picks "${LIVE_OUTDIR}/picks_live.csv" \
              --state-dir "${STATE_DIR}" \
              --kelly "${KELLY_SCALE}" \
              --stake-cap "${ABS_CAP}" \
              --max-stake-eur "${MAX_STAKE_EUR}" \
              --assume-random-if-missing ${SIM_ASSUME}
          else
            echo "No live picks generated."
          fi

      - name: Snapshot close odds (for CLV)
        run: |
          if [ -f "${LIVE_OUTDIR}/live_odds.csv" ]; then
            python scripts/fetch_close_odds.py \
              --odds "${LIVE_OUTDIR}/live_odds.csv" \
              --out "${LIVE_OUTDIR}/close_odds.csv" \
              --max-drift 0.08
          else
            echo "No live_odds.csv present; skipping close odds snapshot."
          fi

      - name: Settle trades (PnL + CLV; update bankroll)
        run: |
          if [ -f "${STATE_DIR}/trade_log.csv" ]; then
            python scripts/settle_trades.py \
              --log "${STATE_DIR}/trade_log.csv" \
              --close-odds "${LIVE_OUTDIR}/close_odds.csv" \
              --state-dir "${STATE_DIR}" \
              --assume-random-if-missing ${SIM_ASSUME}
          else
            echo "No trade_log.csv yet; nothing to settle."
          fi

      - name: Build dashboard
        run: |
          python scripts/make_dashboard.py \
            --state-dir "${STATE_DIR}" \
            --results "${RESULTS_DIR}" \
            --live "${LIVE_OUTDIR}" \
            --out "${DOCS_DIR}"

      - name: Print clean summary table
        run: |
          python scripts/quick_summary.py \
            --state-dir "${STATE_DIR}" \
            --live-dir "${LIVE_OUTDIR}" \
            --results-dir "${RESULTS_DIR}"

      - name: Auto-commit state + docs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "${STATE_DIR}" "${DOCS_DIR}" || true
          git commit -m "chore(engine): update state+docs [skip ci]" || echo "Nothing to commit."
          git push || echo "Nothing to push."
