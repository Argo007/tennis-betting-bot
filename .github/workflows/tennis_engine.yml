name: Tennis Engine LIVE (Manual Only)

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "choose what to run"
        type: choice
        required: true
        default: "all"
        options: [all, live]
      min_edge:
        description: "edge threshold (e.g., 0.05)"
        required: true
        default: "0.05"
      kelly_scale:
        description: "kelly scale (0.0â€“1.0)"
        required: true
        default: "0.50"
      max_frac:
        description: "max % bankroll per bet (e.g., 0.02)"
        required: true
        default: "0.02"
      assume_random_if_missing:
        description: "impute missing odds/results randomly?"
        type: choice
        required: true
        default: "false"
        options: [false, true]

env:
  PYTHON_VERSION: "3.11"
  STATE_DIR: ".state"
  DOCS_DIR: "docs"
  SNAPSHOT_DIR: ".state/snapshots"
  PICKS_FILE: "picks_live.csv"
  TRADE_LOG: ".state/trade_log.csv"
  CLOSE_ODDS_FILE: "close_odds.csv"
  DASHBOARD_HTML: "docs/index.html"

  # expose inputs to shell and python
  INPUT_MODE: ${{ github.event.inputs.mode }}
  INPUT_MIN_EDGE: ${{ github.event.inputs.min_edge }}
  INPUT_KELLY_SCALE: ${{ github.event.inputs.kelly_scale }}
  INPUT_MAX_FRAC: ${{ github.event.inputs.max_frac }}
  INPUT_ASSUME_RANDOM: ${{ github.event.inputs.assume_random_if_missing }}

jobs:
  engine:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy tabulate
          fi

      - name: Prepare folders
        run: |
          mkdir -p "${STATE_DIR}" "${DOCS_DIR}" "${SNAPSHOT_DIR}"
          # Ensure trade log has header
          if [ ! -f "${TRADE_LOG}" ]; then
            echo "ts,match,selection,odds,edge,stake" > "${TRADE_LOG}"
          fi

      - name: Generate picks (respects inputs)
        if: env.INPUT_MODE == 'all' || env.INPUT_MODE == 'live'
        run: |
          set -e
          if [ -f tennis_value_picks_pro.py ]; then
            python tennis_value_picks_pro.py \
              --out "${PICKS_FILE}" \
              --state-dir "${STATE_DIR}" \
              --min-edge "${INPUT_MIN_EDGE}" \
              --kelly-scale "${INPUT_KELLY_SCALE}" \
              --max-frac "${INPUT_MAX_FRAC}"
          elif [ -f generate_picks.py ]; then
            python generate_picks.py \
              --out "${PICKS_FILE}" \
              --state-dir "${STATE_DIR}" \
              --min-edge "${INPUT_MIN_EDGE}" \
              --kelly-scale "${INPUT_KELLY_SCALE}" \
              --max-frac "${INPUT_MAX_FRAC}"
          else
            echo "No pick generator found; creating empty ${PICKS_FILE}."
            echo "ts,match,selection,odds,edge,stake" > "${PICKS_FILE}"
          fi

      - name: Compute MAX_STAKE_EUR from bankroll and input max_frac
        id: bankroll
        run: |
          python - <<'PY'
          import os, json
          state_dir = os.environ["STATE_DIR"]
          max_frac = float(os.environ["INPUT_MAX_FRAC"])
          bankp = os.path.join(state_dir, "bankroll.json")
          bankroll = 1000.0
          if os.path.isfile(bankp):
            try:
              bankroll = float(json.load(open(bankp)).get("bankroll", bankroll))
            except Exception:
              pass
          max_stake = round(bankroll * max_frac, 2)
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            f.write(f"max_stake={max_stake}\n")
          print(f"Bankroll={bankroll}  max_frac={max_frac}  MAX_STAKE_EUR={max_stake}")
          PY

      - name: Log live picks (append to state/trade_log.csv)
        if: env.INPUT_MODE == 'all' || env.INPUT_MODE == 'live'
        run: |
          set -e
          python - <<'PY'
          import os, csv, time
          picks = os.environ["PICKS_FILE"]
          log = os.environ["TRADE_LOG"]
          max_stake = float("${{ steps.bankroll.outputs.max_stake }}")
          if not os.path.isfile(picks) or os.path.getsize(picks) == 0:
            raise SystemExit("No picks to log.")
          with open(picks, newline='') as f:
            rdr = csv.DictReader(f)
            rows = list(rdr)
          if not rows:
            raise SystemExit("No picks to log.")
          out = []
          for r in rows:
            ts = r.get("ts") or str(int(time.time()))
            stake = r.get("stake")
            try:
              stake = min(float(stake) if stake not in (None, "") else max_stake, max_stake)
            except Exception:
              stake = max_stake
            out.append([ts, r.get("match",""), r.get("selection",""), r.get("odds",""), r.get("edge",""), f"{stake:.2f}"])
          with open(log, "a", newline='') as f:
            w = csv.writer(f); [w.writerow(r) for r in out]
          print(f"Appended {len(out)} rows to {log}")
          PY

      - name: Snapshot close odds (for CLV)
        run: |
          if [ -f "${CLOSE_ODDS_FILE}" ]; then
            stamp="$(date -u +'%Y%m%dT%H%M%SZ')"
            cp "${CLOSE_ODDS_FILE}" "${SNAPSHOT_DIR}/close_odds_${stamp}.csv"
            echo "Snapshot: ${SNAPSHOT_DIR}/close_odds_${stamp}.csv"
          else
            echo "No ${CLOSE_ODDS_FILE}; skipping CLV snapshot."
          fi

      - name: Settle trades (PnL + CLV; update bankroll)
        run: |
          if [ -f "${STATE_DIR}/trade_log.csv" ]; then
            if [ -f settle_trades.py ]; then
              python settle_trades.py \
                --log "${STATE_DIR}/trade_log.csv" \
                --state-dir "${STATE_DIR}" \
                --assume-random-if-missing "${INPUT_ASSUME_RANDOM}" \
                --out "${STATE_DIR}/settled_trades.csv"
            else
              echo "settle_trades.py missing; skipping real settlement."
            fi
          else
            echo "No trade_log.csv; nothing to settle."
          fi

      - name: Build dashboard
        run: |
          if [ -f make_dashboard.py ]; then
            python make_dashboard.py --state-dir "${STATE_DIR}" --out "${DASHBOARD_HTML}"
          else
            cat > "${DASHBOARD_HTML}" <<HTML
            <!doctype html><meta charset="utf-8"><title>Tennis Engine</title>
            <h1>Tennis Engine</h1><p>Dashboard generator not found; placeholder page.</p>
            HTML
          fi

      - name: Print summary table (last 20 trades)
        run: |
          python - <<'PY'
          import os, csv
          from tabulate import tabulate
          p = os.environ["TRADE_LOG"]
          if not os.path.isfile(p) or os.path.getsize(p)==0:
            print("No trades logged."); raise SystemExit(0)
          with open(p) as f:
            rows = list(csv.DictReader(f))
          rows = rows[-20:]
          print(tabulate(rows, headers="keys", tablefmt="github"))
          PY

      - name: Auto-commit state + docs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "tennis_engine: update state and dashboard [skip ci]"
            git push
          fi
