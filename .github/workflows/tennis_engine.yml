name: Tennis Engine LIVE (Manual Only)

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "choose what to run"
        type: choice
        required: true
        default: "all"
        options: [all, live]
      min_edge:
        description: "edge threshold (e.g., 0.05)"
        required: true
        default: "0.05"
      kelly_scale:
        description: "kelly scale (0.0–1.0)"
        required: true
        default: "0.50"
      max_frac:
        description: "max % bankroll per bet (e.g., 0.05)"
        required: true
        default: "0.05"
      abs_cap:
        description: "absolute € stake cap"
        required: true
        default: "200"
      assume_random:
        description: "simulate result if missing (true/false)"
        required: true
        default: "true"
      notify_rows:
        description: "notify if >= rows"
        required: true
        default: "1"

jobs:
  engine:
    runs-on: ubuntu-latest
    env:
      LIVE_OUTDIR: live_results
      STATE_DIR: state
      RESULTS_DIR: results
      DOCS_DIR: docs
      MIN_EDGE: ${{ github.event.inputs.min_edge }}
      KELLY_SCALE: ${{ github.event.inputs.kelly_scale }}
      MAX_FRAC: ${{ github.event.inputs.max_frac }}
      ABS_CAP: ${{ github.event.inputs.abs_cap }}
      ASSUME_RANDOM: ${{ github.event.inputs.assume_random }}
      NOTIFY_ROWS: ${{ github.event.inputs.notify_rows }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          # hard guarantees for our scripts
          pip install pandas requests

      # 1) Fetch live odds (matches + odds -> CSVs)
      - name: Fetch live odds
        shell: bash
        run: |
          mkdir -p "${LIVE_OUTDIR}"
          python scripts/fetch_live_matches.py --out "${LIVE_OUTDIR}/live_matches.csv"
          python scripts/fetch_live_odds.py --matches "${LIVE_OUTDIR}/live_matches.csv" --out "${LIVE_OUTDIR}/live_odds.csv"

      # 2) Generate live value picks (from odds)
      - name: Generate live value picks
        shell: bash
        run: |
          python scripts/tennis_value_picks_live.py \
            --odds "${LIVE_OUTDIR}/live_odds.csv" \
            --outdir "${LIVE_OUTDIR}" \
            --min-edge "${MIN_EDGE}"

      # 3) Compute MAX_STAKE_EUR once (safe helper script)
      - name: Compute MAX_STAKE_EUR
        id: maxstake
        shell: bash
        run: |
          python scripts/compute_max_stake.py \
            --state-dir "${STATE_DIR}" \
            --max-frac "${MAX_FRAC}" \
            --floor 1 > .max_stake_eur.txt
          echo "MAX_STAKE_EUR=$(cat .max_stake_eur.txt)" >> $GITHUB_ENV
          echo "max_stake=$(cat .max_stake_eur.txt)"
      
      # 4) Log live picks (append to state/trade_log.csv)
      - name: Log live picks (append to state/trade_log.csv)
        shell: bash
        run: |
          if [ -f "${LIVE_OUTDIR}/picks_live.csv" ]; then
            python scripts/log_live_picks.py \
              --picks "${LIVE_OUTDIR}/picks_live.csv" \
              --state-dir "${STATE_DIR}" \
              --kelly "${KELLY_SCALE}" \
              --stake-cap "${ABS_CAP}" \
              --max-stake-eur "${MAX_STAKE_EUR}" \
              --assume-random-if-missing "${ASSUME_RANDOM}"
          else
            echo "No live picks generated."
          fi

      # 5) Snapshot close odds for CLV
      - name: Snapshot close odds (for CLV)
        shell: bash
        run: |
          if [ -f "${LIVE_OUTDIR}/live_odds.csv" ]; then
            python scripts/fetch_close_odds.py \
              --odds "${LIVE_OUTDIR}/live_odds.csv" \
              --out "${LIVE_OUTDIR}/close_odds.csv" \
              --max-drift 0.08
          else
            echo "No live_odds.csv to snapshot."
          fi

      # 6) Settle trades (PnL + CLV; update bankroll)
      - name: Settle trades (PnL + CLV; update bankroll)
        shell: bash
        run: |
          if [ -f "${STATE_DIR}/trade_log.csv" ]; then
            EXTRA=""
            # settle_trades.py uses a store_true flag; pass it only when true
            if [ "${ASSUME_RANDOM}" = "true" ]; then
              EXTRA="--assume-random-if-missing"
            fi
            python scripts/settle_trades.py \
              --log "${STATE_DIR}/trade_log.csv" \
              --close-odds "${LIVE_OUTDIR}/close_odds.csv" \
              --state-dir "${STATE_DIR}" \
              ${EXTRA}
          else
            echo "No trade_log.csv to settle."
          fi

      # 7) Build attractive dashboard (HTML injected into job summary)
      - name: Build dashboard
        shell: bash
        run: |
          python scripts/make_dashboard.py \
            --state-dir "${STATE_DIR}" \
            --live-dir "${LIVE_OUTDIR}" \
            --results-dir "${RESULTS_DIR}" \
            --min-edge "${MIN_EDGE}" \
            --kelly "${KELLY_SCALE}" \
            --max-frac "${MAX_FRAC}" \
            --abs-cap "${ABS_CAP}"

      # 8) Print clean summary table (short)
      - name: Print clean summary table
        shell: bash
        run: |
          python scripts/quick_summary.py --state-dir "${STATE_DIR}" --live-dir "${LIVE_OUTDIR}"

      # 9) Auto-commit state + docs
      - name: Auto-commit state + docs
        shell: bash
        env:
          GH_USER_NAME: "github-actions[bot]"
          GH_USER_EMAIL: "github-actions[bot]@users.noreply.github.com"
        run: |
          python scripts/autocommit_state.py \
            --paths "${STATE_DIR}" "${RESULTS_DIR}" "${DOCS_DIR}" \
            --message "chore: update state/docs after LIVE run" \
            --user-name "${GH_USER_NAME}" \
            --user-email "${GH_USER_EMAIL}"
