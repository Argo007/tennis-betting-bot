name: Tennis Engine LIVE (Manual Only)

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "choose what to run"
        type: choice
        required: true
        default: "all"
        options: ["all", "live"]
      min_edge:
        description: "edge threshold (e.g., 0.05)"
        required: true
        default: "0.05"
      kelly_scale:
        description: "kelly scale (0.0–1.0)"
        required: true
        default: "0.50"
      max_frac:
        description: "max % bankroll per bet (e.g., 0.02)"
        required: true
        default: "0.02"
      assume_random_if_missing:
        description: "impute missing odds/results randomly?"
        type: choice
        required: true
        default: "false"
        options: ["false", "true"]

env:
  PYTHON_VERSION: "3.11"
  STATE_DIR: ".state"
  DOCS_DIR: "docs"
  SNAPSHOT_DIR: ".state/snapshots"
  PICKS_FILE: "picks_live.csv"
  TRADE_LOG: ".state/trade_log.csv"
  CLOSE_ODDS_FILE: "close_odds.csv"
  DASHBOARD_HTML: "docs/index.html"

  INPUT_MODE: ${{ github.event.inputs.mode }}
  INPUT_MIN_EDGE: ${{ github.event.inputs.min_edge }}
  INPUT_KELLY_SCALE: ${{ github.event.inputs.kelly_scale }}
  INPUT_MAX_FRAC: ${{ github.event.inputs.max_frac }}
  INPUT_ASSUME_RANDOM: ${{ github.event.inputs.assume_random_if_missing }}

jobs:
  engine:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade tabulate
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy
          fi
          pip install --upgrade tabulate

      - name: Prepare folders
        run: |
          mkdir -p "${STATE_DIR}" "${DOCS_DIR}" "${SNAPSHOT_DIR}"
          [ -f "${TRADE_LOG}" ] || echo "ts,match,selection,odds,edge,stake" > "${TRADE_LOG}"

      - name: Generate picks (auto-detect CLI)
        if: env.INPUT_MODE == 'all' || env.INPUT_MODE == 'live'
        run: |
          set -e
          GEN_FAIL=0
          if [ -f tennis_value_picks_pro.py ]; then
            if python tennis_value_picks_pro.py -h 2>&1 | grep -q " --kelly "; then
              python tennis_value_picks_pro.py --kelly "${INPUT_KELLY_SCALE}" --lookahead-h 12 --region all --out "${PICKS_FILE}" || GEN_FAIL=1
            else
              python tennis_value_picks_pro.py --min-edge "${INPUT_MIN_EDGE}" --kelly-scale "${INPUT_KELLY_SCALE}" --max-frac "${INPUT_MAX_FRAC}" --state-dir "${STATE_DIR}" --out "${PICKS_FILE}" || GEN_FAIL=1
            fi
          elif [ -f generate_picks.py ]; then
            python generate_picks.py --min-edge "${INPUT_MIN_EDGE}" --kelly-scale "${INPUT_KELLY_SCALE}" --max-frac "${INPUT_MAX_FRAC}" --state-dir "${STATE_DIR}" --out "${PICKS_FILE}" || GEN_FAIL=1
          else
            GEN_FAIL=1
          fi
          if [ "$GEN_FAIL" = "1" ]; then
            echo "::warning::Pick generator missing/failed; creating placeholder ${PICKS_FILE}"
            echo "ts,match,selection,odds,edge,stake" > "${PICKS_FILE}"
          fi

      - name: Compute MAX_STAKE_EUR
        id: bankroll
        run: |
          python - <<'PY'
          import os, json, pathlib
          state = os.environ['STATE_DIR']
          mf = float(os.environ['INPUT_MAX_FRAC'])
          p = pathlib.Path(state) / 'bankroll.json'
          br = 1000.0
          if p.is_file():
              try:
                  br = float(json.load(open(p)).get('bankroll', br))
              except Exception:
                  pass
          ms = round(br * mf, 2)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"max_stake={ms}\n")
          print(f"Bankroll={br} max_frac={mf} MAX_STAKE_EUR={ms}")
          PY

      - name: Log live picks
        if: env.INPUT_MODE == 'all' || env.INPUT_MODE == 'live'
        run: |
          python - <<'PY'
          import os, csv, time, pathlib, sys
          picks = os.environ['PICKS_FILE']
          log = os.environ['TRADE_LOG']
          ms = float("${{ steps.bankroll.outputs.max_stake }}")
          p = pathlib.Path(picks)
          if (not p.is_file()) or p.stat().st_size == 0:
              sys.exit(0)
          rows = list(csv.DictReader(open(picks)))
          if not rows:
              sys.exit(0)
          out = []
          for r in rows:
              ts = r.get("ts") or str(int(time.time()))
              try:
                  st = min(float(r.get("stake") or ms), ms)
              except Exception:
                  st = ms
              out.append([ts, r.get("match",""), r.get("selection",""), r.get("odds",""), r.get("edge",""), f"{st:.2f}"])
          w = csv.writer(open(log, "a", newline=""))
          w.writerows(out)
          print(f"Appended {len(out)} rows to {log}")
          PY

      - name: Snapshot close odds (CLV)
        run: |
          if [ -f "${CLOSE_ODDS_FILE}" ]; then
            stamp="$(date -u +'%Y%m%dT%H%M%SZ')"
            cp "${CLOSE_ODDS_FILE}" "${SNAPSHOT_DIR}/close_odds_${stamp}.csv"
            echo "Snapshot saved."
          else
            echo "No ${CLOSE_ODDS_FILE}; skip."
          fi

      - name: Settle trades (PnL + CLV; update bankroll)
        run: |
          if [ -f "${STATE_DIR}/trade_log.csv" ] && [ -f settle_trades.py ]; then
            python settle_trades.py --log "${STATE_DIR}/trade_log.csv" --state-dir "${STATE_DIR}" --assume-random-if-missing "${INPUT_ASSUME_RANDOM}" --out "${STATE_DIR}/settled_trades.csv"
          else
            echo "No trade_log or settle_trades.py; skip settlement."
          fi

      - name: Build dashboard
        run: |
          if [ -f make_dashboard.py ]; then
            python make_dashboard.py --state-dir "${STATE_DIR}" --out "${DASHBOARD_HTML}"
          else
            echo '<!doctype html><meta charset="utf-8"><title>Tennis Engine</title><h1>Tennis Engine</h1><p>Placeholder dashboard.</p>' > "${DASHBOARD_HTML}"
          fi

      - name: Results summary (visible in this Actions run)
        run: |
          python - <<'PY'
          import os, csv, pathlib, json
          from datetime import datetime

          sd = os.environ['STATE_DIR']
          picks = os.environ['PICKS_FILE']
          log = os.path.join(sd, 'trade_log.csv')
          settled = os.path.join(sd, 'settled_trades.csv')
          bankp = os.path.join(sd, 'bankroll.json')
          dashboard = os.environ['DASHBOARD_HTML']

          def head(path, limit, fields=None):
            if not os.path.isfile(path) or os.path.getsize(path)==0:
              return []
            with open(path, newline='') as f:
              rows = list(csv.DictReader(f))
            if fields:
              rows = [{k:r.get(k,'')} for r in rows[-limit:] for k in [None]][::0]  # placeholder, replaced below
            return rows[-limit:]

          def md_table(rows, columns):
            if not rows: return "_(none)_\n"
            out = []
            out.append("| " + " | ".join(columns) + " |")
            out.append("|" + "|".join(["---"]*len(columns)) + "|")
            for r in rows:
              out.append("| " + " | ".join(str(r.get(c,'')) for c in columns) + " |")
            return "\n".join(out) + "\n"

          # Load bankroll if present
          bankroll = None
          if os.path.isfile(bankp):
            try:
              bankroll = float(json.load(open(bankp)).get("bankroll"))
            except Exception:
              pass

          now = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%SZ")
          picks_rows = head(picks, 15)
          log_rows = head(log, 20)
          settled_rows = head(settled, 20)

          # Choose columns for nice display if headers exist
          def cols(rows, fallback):
            return fallback if not rows else list(rows[-1].keys())

          picks_cols = [c for c in ["ts","match","selection","odds","edge","stake"] if not picks_rows or c in picks_rows[-1]]
          log_cols   = [c for c in ["ts","match","selection","odds","edge","stake"] if not log_rows or c in log_rows[-1]]
          set_cols   = [c for c in ["ts","match","selection","odds","edge","stake","result","pnl","clv"] if not settled_rows or c in settled_rows[-1]]

          md = []
          md.append(f"# Tennis Engine — Run Summary ({now})\n")
          md.append("**Files updated**: `picks_live.csv`, `.state/*`, `docs/index.html`  \n")
          if bankroll is not None:
            md.append(f"**Bankroll**: **€{bankroll:,.2f}**\n")
          md.append("\n## Latest Picks\n")
          md.append(md_table(picks_rows, picks_cols))
          md.append("\n## Last 20 Trades (trade_log)\n")
          md.append(md_table(log_rows, log_cols))
          md.append("\n## Last 20 Settlements\n")
          md.append(md_table(settled_rows, set_cols))
          md.append(f"\n**Dashboard**: `{dashboard}` (enable GitHub Pages → /docs to view on the web)\n")

          with open(os.environ["GITHUB_STEP_SUMMARY"], "a") as f:
            f.write("\n".join(md))
          PY

      # Optional: stamp every run so a commit is created even if nothing changed
      # - name: Stamp run
      #   run: |
      #     date -u +"%Y-%m-%dT%H:%M:%SZ" >> .state/run_history.log

      - name: Commit & push changes to main
        run: |
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "engine: update state+dashboard [skip ci]"
            git push
          fi
