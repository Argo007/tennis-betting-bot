name: Tennis Engine (Backtest + Live)

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Choose what to run"
        required: false
        default: "all"
        type: choice
        options: [all, backtest, live]
  schedule:
    - cron: "0 */6 * * *"     # backtest every 6 hours
    - cron: "*/30 * * * *"    # live every 30 minutes

permissions:
  contents: read

concurrency:
  group: tennis-engine-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backtest:
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.mode != 'live' }}
    runs-on: ubuntu-latest
    env:
      OUTDIR: results
      SYNTHETIC: synthetic_picks.csv
      MIN_EDGE: "0.08"
      KELLY_SCALE: "1.0"
      BANKROLL: "1000"
      BANDS: "2.0,2.6|2.6,3.2|3.2,4.0"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      - name: Ensure output dir
        run: mkdir -p "${OUTDIR}"

      - name: Fetch historical tennis data (robust)
        shell: bash
        run: |
          if [ -f scripts/fetch_tennis_data.py ]; then
            python scripts/fetch_tennis_data.py --outdir "${OUTDIR}" || true
          else
            echo "scripts/fetch_tennis_data.py missing → creating stub tennis_data.csv"
            printf '%s\n' 'match_id,player_a,player_b,odds,p,result,price,p_model' > "${OUTDIR}/tennis_data.csv"
          fi

      - name: Generate value picks (historical, robust)
        shell: bash
        run: |
          if [ -f scripts/tennis_value_picks_pro.py ]; then
            python scripts/tennis_value_picks_pro.py \
              --input "${OUTDIR}/tennis_data.csv" \
              --outdir "${OUTDIR}" \
              --min-edge "${MIN_EDGE}" || true
          else
            echo "scripts/tennis_value_picks_pro.py missing → creating empty picks_final.csv"
            printf '%s\n' 'odds,p,result,price,p_model' > "${OUTDIR}/picks_final.csv"
          fi

      - name: Matrix Kelly backtest (only if script and picks exist)
        shell: bash
        run: |
          if [ -f scripts/run_matrix_backtest.py ] && [ -s "${OUTDIR}/picks_final.csv" ]; then
            python scripts/run_matrix_backtest.py \
              --input "${OUTDIR}/picks_final.csv" \
              --outdir "${OUTDIR}" \
              --stake-mode kelly \
              --edge "${MIN_EDGE}" \
              --kelly-scale "${KELLY_SCALE}" \
              --bankroll "${BANKROLL}" \
              --bands "${BANDS}" || true
          else
            echo "Skip matrix backtest (missing script or empty picks)."
          fi

      - name: "Fallback: force synthetic backtest when no picks"
        shell: bash
        run: |
          if [ ! -s "${OUTDIR}/picks_final.csv" ]; then
            echo "No picks found. Running synthetic backtest..."
            printf '%s\n' \
              'odds,p,result,price,p_model' \
              '2.10,0.55,1,2.10,0.55' \
              '2.40,0.45,0,2.40,0.45' \
              '2.80,0.40,1,2.80,0.40' \
              '2.00,0.35,0,2.00,0.35' \
              '3.20,0.35,0,3.20,0.35' \
              '2.30,0.48,1,2.30,0.48' \
              '3.50,0.32,0,3.50,0.32' \
              > "${SYNTHETIC}"
            if [ -f scripts/run_matrix_backtest.py ]; then
              python scripts/run_matrix_backtest.py \
                --input "${SYNTHETIC}" \
                --outdir "${OUTDIR}" \
                --stake-mode kelly \
                --edge "${MIN_EDGE}" \
                --kelly-scale "${KELLY_SCALE}" \
                --bankroll "${BANKROLL}" \
                --bands "${BANDS}" || true
            fi
          fi

      - name: Upload backtest artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tennis_backtest_${{ github.run_id }}
          path: ${{ env.OUTDIR }}

      - name: Print backtest summary
        if: always()
        run: |
          test -f "${OUTDIR}/backtest_summary.json" && cat "${OUTDIR}/backtest_summary.json" || echo "No summary file."

  live:
    if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.mode != 'backtest' }}
    runs-on: ubuntu-latest
    env:
      LIVE_OUTDIR: live_results
      MIN_EDGE: "0.08"
      KELLY_SCALE: "0.5"
      BANKROLL: "1000"
      BANDS: "2.0,2.6|2.6,3.2|3.2,4.0"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      - name: Ensure output dir
        run: mkdir -p "${LIVE_OUTDIR}"

      - name: Fetch live matches (robust)
        shell: bash
        run: |
          if [ -f scripts/fetch_live_matches.py ]; then
            python scripts/fetch_live_matches.py --out "${LIVE_OUTDIR}/live_matches.csv" || true
          else
            echo "scripts/fetch_live_matches.py missing → creating empty matches CSV"
            printf '%s\n' 'match_id,player_a,player_b,tournament,start_time' > "${LIVE_OUTDIR}/live_matches.csv"
          fi

      - name: Fetch live odds (robust)
        shell: bash
        run: |
          if [ -f scripts/fetch_live_odds.py ]; then
            python scripts/fetch_live_odds.py \
              --matches "${LIVE_OUTDIR}/live_matches.csv" \
              --out "${LIVE_OUTDIR}/live_odds.csv" || true
          else
            echo "scripts/fetch_live_odds.py missing → creating empty odds CSV"
            printf '%s\n' 'match_id,book,market,sel,odds,ts' > "${LIVE_OUTDIR}/live_odds.csv"
          fi

      - name: Generate live value picks (robust)
        shell: bash
        run: |
          if [ -f scripts/tennis_value_picks_live.py ]; then
            python scripts/tennis_value_picks_live.py \
              --odds "${LIVE_OUTDIR}/live_odds.csv" \
              --outdir "${LIVE_OUTDIR}" \
              --min-edge "${MIN_EDGE}" || true
          else
            echo "scripts/tennis_value_picks_live.py missing → creating empty picks_live.csv"
            printf '%s\n' 'match_id,sel,odds,p,edge,price,p_model' > "${LIVE_OUTDIR}/picks_live.csv"
          fi

      - name: Live Kelly sizing (only if script exists)
        shell: bash
        run: |
          if [ -f scripts/run_matrix_backtest.py ] && [ -s "${LIVE_OUTDIR}/picks_live.csv" ]; then
            python scripts/run_matrix_backtest.py \
              --input "${LIVE_OUTDIR}/picks_live.csv" \
              --outdir "${LIVE_OUTDIR}" \
              --stake-mode kelly \
              --edge "${MIN_EDGE}" \
              --kelly-scale "${KELLY_SCALE}" \
              --bankroll "${BANKROLL}" \
              --bands "${BANDS}" || true
          else
            echo "Skip live backtest (missing script or empty picks)."
          fi

      - name: Upload live artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tennis_live_${{ github.run_id }}
          path: ${{ env.LIVE_OUTDIR }}
