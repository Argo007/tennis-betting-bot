name: Tennis Engine LIVE (Manual Only)

permissions:
  contents: write
  pages: write
  id-token: write

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "live = generate+log only, all = full pipeline + deploy"
        type: choice
        required: true
        default: "all"
        options: ["all", "live"]
      min_edge:
        description: "edge threshold (decimal, e.g., 0.05)"
        required: true
        default: "0.05"
      kelly_scale:
        description: "kelly scale (0.0â€“1.0)"
        required: true
        default: "0.50"
      max_frac:
        description: "max % bankroll per bet (e.g., 0.02)"
        required: true
        default: "0.02"
      assume_random_if_missing:
        description: "impute missing odds/results randomly?"
        type: choice
        required: true
        default: "false"
        options: ["false","true"]
      edge_goal:
        description: "Total Edge goal (points)"
        required: true
        default: "8.0"
      top_n:
        description: "Top N picks to show in summary"
        required: true
        default: "15"
      force_edge_strategy:
        description: "fallback only when model columns missing"
        type: choice
        required: true
        default: "none"
        options: ["none", "uplift_pct", "min_edge"]
      force_edge_uplift_pct:
        description: "when strategy=uplift_pct (e.g. 3 = +3% to implied prob)"
        required: true
        default: "0"

env:
  PYTHON_VERSION: "3.11"

  # paths
  STATE_DIR: ".state"
  DOCS_DIR: "docs"
  SNAPSHOT_DIR: ".state/snapshots"
  PICKS_FILE: "picks_live.csv"
  TRADE_LOG: ".state/trade_log.csv"
  CLOSE_ODDS_FILE: "close_odds.csv"
  DASHBOARD_HTML: "docs/index.html"

  # inputs -> env
  INPUT_MODE: ${{ github.event.inputs.mode }}
  INPUT_MIN_EDGE: ${{ github.event.inputs.min_edge }}
  INPUT_KELLY_SCALE: ${{ github.event.inputs.kelly_scale }}
  INPUT_MAX_FRAC: ${{ github.event.inputs.max_frac }}
  INPUT_ASSUME_RANDOM: ${{ github.event.inputs.assume_random_if_missing }}
  EDGE_GOAL: ${{ github.event.inputs.edge_goal }}
  TOP_N: ${{ github.event.inputs.top_n }}
  FORCE_EDGE_STRATEGY: ${{ github.event.inputs.force_edge_strategy }}
  FORCE_EDGE_UPLIFT_PCT: ${{ github.event.inputs.force_edge_uplift_pct }}

  # optional tuning for finals bump (read by enrich script)
  # FINALS_KELLY_SCALE: "0.85"

jobs:
  engine:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy tabulate

      - name: Prepare folders
        run: |
          mkdir -p "${STATE_DIR}" "${DOCS_DIR}" "${SNAPSHOT_DIR}" scripts
          [ -f "${TRADE_LOG}" ] || echo "ts,match,selection,odds,edge,stake" > "${TRADE_LOG}"
          [ -f "${DOCS_DIR}/.nojekyll" ] || touch "${DOCS_DIR}/.nojekyll"

      - name: Stamp run
        run: echo "RUN_TS=$(date -u +'%Y%m%d%H%M%S')" >> "$GITHUB_ENV"

      - name: Compute bankroll + max stake
        id: bankroll
        run: |
          python <<'PY'
          import os, json, pathlib
          p = pathlib.Path(os.environ['STATE_DIR']) / 'bankroll.json'
          br = 1000.0
          if p.is_file() and p.stat().st_size:
              try:
                  br = float(json.load(open(p)).get('bankroll', br))
              except Exception:
                  pass
          mf = float(os.environ['INPUT_MAX_FRAC'])
          ms = round(br * mf, 2)
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              fh.write(f"bankroll={br}\n")
              fh.write(f"max_stake={ms}\n")
          print(f"Bankroll={br}  max_frac={mf}  MAX_STAKE_EUR={ms}")
          PY

      - name: Export bankroll envs
        run: |
          {
            echo "BANKROLL=${{ steps.bankroll.outputs.bankroll }}";
            echo "MAX_STAKE_EUR=${{ steps.bankroll.outputs.max_stake }}";
            echo "KELLY_SCALE=${INPUT_KELLY_SCALE}";
            echo "MIN_EDGE=${INPUT_MIN_EDGE}";
          } >> "$GITHUB_ENV"
"

      - name: Generate picks (auto-detect generator)
        if: env.INPUT_MODE == 'all' || env.INPUT_MODE == 'live'
        continue-on-error: true
        run: |
          if [ -f tennis_value_picks_pro.py ]; then
            python tennis_value_picks_pro.py --out "${PICKS_FILE}" || true
          elif [ -f generate_picks.py ]; then
            python generate_picks.py --out "${PICKS_FILE}" || true
          else
            echo "No generator found; leaving ${PICKS_FILE} as-is."
          fi
          [ -f "${PICKS_FILE}" ] || echo "date,player,opponent,odds,model_conf" > "${PICKS_FILE}"

      - name: Enrich with EdgeSmith (edge + Kelly)
        run: python scripts/edge_smith_enrich.py

      - name: Log live picks to trade_log.csv
        if: env.INPUT_MODE == 'all' || env.INPUT_MODE == 'live'
        run: |
          python -c "import os,csv,time,pathlib;
picks=os.environ['PICKS_FILE']; log=os.environ['TRADE_LOG'];
run_ts=os.environ.get('RUN_TS') or str(int(time.time()))
p=pathlib.Path(picks)
rows=(list(csv.DictReader(open(picks))) if (p.is_file() and p.stat().st_size>0) else [])
import sys
if not rows: sys.exit(0)
if not path:=pathlib.Path(log): pass
if not path.is_file():
  csv.writer(open(log,'w',newline='')).writerow(['ts','match','selection','odds','edge','stake'])
out=[]
for r in rows:
  ts=(r.get('ts') or '').strip() or run_ts
  out.append([ts, r.get('match','â€”'), r.get('selection','â€”'), r.get('odds',''), r.get('edge',''), r.get('kelly_stake','')])
w=csv.writer(open(log,'a',newline='')); w.writerows(out)
print(f'Appended {len(out)} rows to {log}')"        

      - name: Snapshot close odds (for CLV)
        if: env.INPUT_MODE == 'all'
        run: |
          if [ -f "${CLOSE_ODDS_FILE}" ]; then
            stamp="$(date -u +'%Y%m%d%H%M%SZ')"
            cp "${CLOSE_ODDS_FILE}" "${SNAPSHOT_DIR}/close_odds_${stamp}.csv"
            echo "Snapshot saved."
          else
            echo "No ${CLOSE_ODDS_FILE}; skip."
          fi

      - name: Settle trades (PnL + CLV; update bankroll)
        if: env.INPUT_MODE == 'all'
        run: |
          if [ -f "${STATE_DIR}/trade_log.csv" ] && [ -f settle_trades.py ]; then
            python settle_trades.py \
              --log "${STATE_DIR}/trade_log.csv" \
              --state-dir "${STATE_DIR}" \
              --assume-random-if-missing "${INPUT_ASSUME_RANDOM}" \
              --out "${STATE_DIR}/settled_trades.csv"
          else
            echo "No trade_log or no settle_trades.py; skip settlement."
          fi

      - name: Build dashboard (HTML)
        if: env.INPUT_MODE == 'all'
        run: python scripts/make_dashboard.py

      - name: Results summary (visible in this Actions run)
        run: |
          python -c "import os,csv;
def read(p):
  import os
  if (not os.path.isfile(p)) or os.path.getsize(p)==0: return []
  return list(csv.DictReader(open(p)))
def fnum(x):
  try:
    s=str(x).strip()
    if s.endswith('%'): return float(s[:-1])/100.0
    return float(s)
  except: return None
picks=read(os.environ.get('PICKS_FILE','picks_live.csv'))
top_n=int(os.environ.get('TOP_N','15'))
edge_goal=float(os.environ.get('EDGE_GOAL','8.0') or 8.0)
rows=[]; tot_e=0.0; tot_k=0.0
for r in picks:
  e=fnum(r.get('edge')); k=fnum(r.get('kelly_stake')); o=fnum(r.get('odds')); ip=fnum(r.get('implied_p'))
  if e is not None: tot_e+=e
  if k: tot_k+=k or 0.0
  rows.append({
    'match': r.get('match','â€”'), 'selection': r.get('selection','â€”'),
    'odds': f'{o:.2f}' if o else r.get('odds',''),
    'implied_p': f'{(ip*100):.1f}%' if ip else '',
    'edge': f'{e:.4f}' if e is not None else '', 'kellyâ‚¬': f'{k:.2f}' if k else ''
  })
rows=sorted(rows, key=lambda x: float(x.get('edge') or -9e9), reverse=True)[:top_n]
total_pts=tot_e*100
prog=int(max(0,min(100,(total_pts/edge_goal)*100))) if edge_goal>0 else 0
bar='â–ˆ'*(prog//10)+'â–‘'*(10-prog//10)
print(f'**Total Edge:** {total_pts:.2f} pts / Goal {edge_goal:.2f}  `{bar}` {prog}%  â€¢  **Total Kelly:** â‚¬{tot_k:.2f}\n')
print('### ðŸ”¥ Top Picks by Edge')
print('| match | selection | odds | implied_p | edge | kellyâ‚¬ |')
print('|---|---|---:|---:|---:|---:|')
for r in rows:
  print(f\"| {r['match']} | {r['selection']} | {r['odds']} | {r['implied_p']} | {r['edge']} | {r['kellyâ‚¬']} |\")" >> "$GITHUB_STEP_SUMMARY"

      - name: Commit & push changes
        run: |
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "engine: enrich picks + kelly + dashboard [skip ci]"
            git push
          fi

  deploy_pages:
    if: ${{ github.event.inputs.mode == 'all' }}
    needs: engine
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    concurrency:
      group: "pages"
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure Pages
        uses: actions/configure-pages@v5
      - name: Upload site (docs/)
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
