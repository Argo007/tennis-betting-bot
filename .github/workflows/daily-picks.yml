name: Tennis Picks (ATP/WTA)

on:
  schedule:
    - cron: "0 8 * * *"    # 08:00 UTC daily
  workflow_dispatch: {}

jobs:
  picks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas requests

      - name: Download ATP/WTA results
        run: |
          mkdir -p matches
          curl -sSL -o matches/atp_matches_2023.csv https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_matches_2023.csv
          curl -sSL -o matches/atp_matches_2024.csv https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_matches_2024.csv
          curl -sSL -o matches/wta_matches_2023.csv https://raw.githubusercontent.com/JeffSackmann/tennis_wta/master/wta_matches_2023.csv
          curl -sSL -o matches/wta_matches_2024.csv https://raw.githubusercontent.com/JeffSackmann/tennis_wta/master/wta_matches_2024.csv

      - name: Generate Elo
        run: |
          python - <<'PY'
          import pandas as pd, glob, os
          START, K = 1500, 32
          def exp(a,b): return 1/(1+10**((b-a)/400))
          def upd(a,b,s): return a + K*(s-exp(a,b))
          def calc(pattern):
              files = glob.glob(pattern)
              df = pd.concat((pd.read_csv(f) for f in files), ignore_index=True)
              E = {}
              for _,r in df.iterrows():
                  w,l = r['winner_name'], r['loser_name']
                  ew, el = E.get(w,START), E.get(l,START)
                  E[w] = upd(ew,el,1); E[l] = upd(el,ew,0)
              return pd.DataFrame([{'player':k,'elo':v} for k,v in E.items()]).sort_values('elo',ascending=False)
          os.makedirs("data", exist_ok=True)
          calc("matches/atp_matches_*.csv").to_csv("data/atp_elo.csv", index=False)
          calc("matches/wta_matches_*.csv").to_csv("data/wta_elo.csv", index=False)
          print("Elo ready.")
          PY

      - name: Run model
        env:
          ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
        run: |
          python tennis_value_picks_pro.py --region eu --lookahead-h 24 --out value_picks_pro.csv

      - name: Print shortlist (QKelly + CLV filter)
        run: |
          python - <<'PY'
          import pandas as pd, os, datetime as dt

          BUF_MIN = 5
          ETA_H = 24
          CLV_MIN = 0.01
          MIN_CONF = 50
          TOP_DOGS, TOP_FAVS = 3, 2
          DOG_MIN, DOG_MAX = 2.20, 4.50
          FAV_MIN, FAV_MAX = 1.30, 1.80

          now = dt.datetime.utcnow().replace(tzinfo=dt.timezone.utc)
          cut = now + dt.timedelta(minutes=BUF_MIN)
          eta_cap = now + dt.timedelta(hours=ETA_H)

          df = pd.read_csv("value_picks_pro.csv")
          for c in ["blended_prob","best_odds","ev_per_unit","kelly_fraction","confidence"]:
              if c in df.columns:
                  df[c] = pd.to_numeric(df[c], errors="coerce")

          if "commence_time_utc" in df.columns:
              df["commence_dt"] = pd.to_datetime(df["commence_time_utc"], utc=True, errors="coerce")
          else:
              df["commence_dt"] = pd.NaT

          df = df[df["commence_dt"].notna() & (df["commence_dt"] >= cut) & (df["commence_dt"] <= eta_cap)]
          df["ev_per_unit"] = df["best_odds"]*df["blended_prob"] - 1.0
          if "kelly_fraction" in df.columns:
              df["kelly"] = df["kelly_fraction"].fillna(0.0)
          else:
              df["kelly"] = ((df["best_odds"] - 1) * df["blended_prob"] - (1 - df["blended_prob"])) / (df["best_odds"] - 1)
              df["kelly"] = df["kelly"].clip(lower=0.0)
          df["qkelly"] = 0.25 * df["kelly"]

          if "consensus_odds" in df.columns:
              df["clv_edge"] = (df["best_odds"] - df["consensus_odds"]) / df["consensus_odds"]
              df = df[df["clv_edge"] >= CLV_MIN]

          df["match_id"] = df.apply(lambda r: " :: ".join(sorted([str(r["player"]), str(r["opponent"])])), axis=1)
          df = df.sort_values("ev_per_unit", ascending=False).groupby("match_id", as_index=False).first()

          def picks(data, lo, hi, n):
              return data[(data["best_odds"].between(lo, hi)) &
                          (data["confidence"] >= MIN_CONF) &
                          (data["ev_per_unit"] > 0)].head(n)

          def bullets(x):
              if x.empty: return "_None_"
              return "\n".join([
                  f"- {r['player']} vs {r['opponent']} @ {r['best_odds']:.2f} "
                  f"(p={r['blended_prob']:.2f}, EV/u={r['ev_per_unit']:.2f}, QKelly={r['qkelly']:.3f}) â€” {r['commence_dt']}"
                  for _, r in x.iterrows()
              ])

          out = []
          for tour in ["ATP", "WTA"]:
              sub = df[df["tour"].str.upper() == tour]
              out += [
                  f"## {tour} Underdogs (Top {TOP_DOGS})",
                  bullets(picks(sub, DOG_MIN, DOG_MAX, TOP_DOGS)),
                  "",
                  f"## {tour} Favorites (Top {TOP_FAVS})",
                  bullets(picks(sub, FAV_MIN, FAV_MAX, TOP_FAVS)),
                  ""
              ]

          with open(os.environ["GITHUB_STEP_SUMMARY"], "a") as f:
              f.write("\n".join(out))
          PY
