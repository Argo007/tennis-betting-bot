name: Daily Tennis Picks (Auto Elo + Daily Picks)

on:
  schedule:
    - cron: "0 8 * * *"   # daily at 08:00 UTC
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas requests

      # ---- ELO generation ----
      - name: Download ATP/WTA match data (last 2 seasons)
        run: |
          mkdir -p matches
          curl -L -o matches/atp_matches_2023.csv https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_matches_2023.csv
          curl -L -o matches/atp_matches_2024.csv https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_matches_2024.csv
          curl -L -o matches/wta_matches_2023.csv https://raw.githubusercontent.com/JeffSackmann/tennis_wta/master/wta_matches_2023.csv
          curl -L -o matches/wta_matches_2024.csv https://raw.githubusercontent.com/JeffSackmann/tennis_wta/master/wta_matches_2024.csv

      - name: Generate Elo ratings
        run: |
          python <<'PY'
          import pandas as pd, glob, os

          START_ELO = 1500
          K = 32
          def exp(a,b): return 1/(1+10**((b-a)/400))
          def upd(a,b,s): return a + K*(s - exp(a,b))

          def calc(pattern):
              files = glob.glob(pattern)
              df = pd.concat([pd.read_csv(f) for f in files], ignore_index=True)
              elos = {}
              for _,r in df.iterrows():
                  w,l = r['winner_name'], r['loser_name']
                  ew, el = elos.get(w, START_ELO), elos.get(l, START_ELO)
                  elos[w] = upd(ew, el, 1)
                  elos[l] = upd(el, ew, 0)
              return pd.DataFrame([{"player":k, "elo":v} for k,v in elos.items()]).sort_values("elo", ascending=False)

          os.makedirs("data", exist_ok=True)
          atp = calc("matches/atp_matches_*.csv")
          wta = calc("matches/wta_matches_*.csv")
          atp.to_csv("data/atp_elo.csv", index=False); atp.to_csv("atp_elo.csv", index=False)
          wta.to_csv("data/wta_elo.csv", index=False); wta.to_csv("wta_elo.csv", index=False)

          print("✅ Elo generated.")
          print("Top 5 ATP:\n", atp.head().to_string(index=False))
          print("\nTop 5 WTA:\n", wta.head().to_string(index=False))
          PY

      # ---- Run your model ----
      - name: Run tennis value picks
        env:
          ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
        run: |
          python tennis_value_picks_pro.py --region eu --out value_picks_pro.csv

      # ---- Build shortlist & daily picks ----
      - name: Build final CSVs and daily picks
        run: |
          python - << 'PY'
          import pandas as pd, os
          df = pd.read_csv("value_picks_pro.csv")

          # +EV shortlist
          picks = df[(df['ev_per_unit']>0) & (df['kelly_fraction']>0.005)].copy()
          picks['stake_units'] = (picks['kelly_fraction']*100).round(1)  # 1 unit = 1% bankroll
          cols = ["tour","surface","commence_time_utc","player","opponent",
                  "blended_prob","best_odds","ev_per_unit","kelly_fraction","stake_units","confidence"]
          top10 = picks.sort_values(["ev_per_unit","confidence"], ascending=False).head(10)[cols]
          top10.to_csv("value_picks_shortlist.csv", index=False)

          # Daily underdog & favorite
          underdog = picks[picks["best_odds"]>=2.5].sort_values("ev_per_unit", ascending=False).head(1)[cols]
          favorite = picks[picks["best_odds"]<=1.8].sort_values("ev_per_unit", ascending=False).head(1)[cols]
          daily = pd.concat([underdog, favorite])
          daily.to_csv("value_picks_daily.csv", index=False)

          # Markdown output for GitHub summary
          def md(df):
              if df.empty: return "_None_"
              d = df.round(4)
              return "| " + " | ".join(d.columns) + " |\n" + "| " + " | ".join(["---"]*len(d.columns)) + " |\n" + \
                     "\n".join("| " + " | ".join(map(str,row)) + " |" for row in d.values)

          with open(os.environ["GITHUB_STEP_SUMMARY"], "a") as f:
              f.write("## ✅ Top +EV Picks (Top 10)\n")
              f.write(md(top10) + "\n\n")
              f.write("### 🐺 Underdog of the Day\n")
              f.write(md(underdog) + "\n\n")
              f.write("### 🏆 Favorite of the Day\n")
              f.write(md(favorite) + "\n")
          PY

      # ---- Upload final CSVs ----
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: value-picks
          path: |
            value_picks_shortlist.csv
            value_picks_daily.csv
