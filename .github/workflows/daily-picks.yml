      - name: Build SMART PICKS â€“ Upsets & Favorites
        run: |
          python - << 'PY'
          import pandas as pd, os
          df = pd.read_csv("value_picks_pro.csv")

          # ===== Upset filter =====
          upsets = df[
              (df['ev_per_unit'] > 0) &
              (df['blended_prob'] >= 0.40) &
              (df['best_odds'].between(2.20, 4.50)) &
              (df['confidence'] >= 50)
          ].copy()

          upsets.insert(0, "match_id", upsets.apply(lambda r: " :: ".join(sorted([str(r['player']), str(r['opponent'])])), axis=1))
          upsets = upsets.sort_values("ev_per_unit", ascending=False).groupby("match_id", as_index=False).head(1)

          upset_cols = ["tour","surface","commence_time_utc","player","opponent",
                        "blended_prob","best_odds","ev_per_unit","kelly_fraction","confidence"]

          upsets = upsets.sort_values(["ev_per_unit","confidence"], ascending=False).head(5)[upset_cols]

          # Fallback if empty
          if upsets.empty:
              fallback = df[(df['ev_per_unit']>0)].copy()
              fallback.insert(0, "match_id", fallback.apply(lambda r: " :: ".join(sorted([str(r['player']), str(r['opponent'])])), axis=1))
              fallback = fallback.sort_values("ev_per_unit", ascending=False).groupby("match_id", as_index=False).head(1)
              upsets = fallback.sort_values(["ev_per_unit","confidence"], ascending=False).head(3)[upset_cols]

          # ===== Favorite filter =====
          favorites = df[
              (df['ev_per_unit'] > 0) &
              (df['blended_prob'] >= 0.70) &
              (df['best_odds'].between(1.30, 1.80)) &
              (df['confidence'] >= 50)
          ].copy()

          favorites.insert(0, "match_id", favorites.apply(lambda r: " :: ".join(sorted([str(r['player']), str(r['opponent'])])), axis=1))
          favorites = favorites.sort_values("ev_per_unit", ascending=False).groupby("match_id", as_index=False).head(1)

          fav_cols = upset_cols
          favorites = favorites.sort_values(["ev_per_unit","confidence"], ascending=False).head(5)[fav_cols]

          # Markdown table
          def md(df):
              if df.empty: return "_No picks_"
              d=df.round(4)
              return "| " + " | ".join(d.columns) + " |\n" + "| " + " | ".join(["---"]*len(d.columns)) + " |\n" + \
                     "\n".join("| " + " | ".join(map(str,row)) + " |" for row in d.values)

          def bullets(df):
              if df.empty: return "_No picks_"
              out=[]
              for _,r in df.iterrows():
                  out.append(f"- {r['player']} vs {r['opponent']} @ {r['best_odds']:.2f} "
                             f"(p={r['blended_prob']:.2f}, EV/u={r['ev_per_unit']:.2f})")
              return "\n".join(out)

          with open(os.environ["GITHUB_STEP_SUMMARY"], "a") as f:
              f.write("## ðŸŽ¯ SMART PICKS â€“ Mid-range Upsets (2.20â€“4.50 odds)\n")
              f.write(md(upsets) + "\n\n")
              f.write("### Quick list\n")
              f.write(bullets(upsets) + "\n\n")

              f.write("## ðŸ›¡ SAFE HIGH-VALUE FAVORITES (1.30â€“1.80 odds)\n")
              f.write(md(favorites) + "\n\n")
              f.write("### Quick list\n")
              f.write(bullets(favorites) + "\n")
          PY
