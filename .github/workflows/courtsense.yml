name: Courtsense CI

on:
  workflow_dispatch:
    inputs:
      start_date:
        description: "Backtest start date (YYYY-MM-DD)"
        required: true
        default: "2024-01-01"
      end_date:
        description: "Backtest end date (YYYY-MM-DD)"
        required: true
        default: "2024-12-31"
      bands:
        description: "Odds bands (comma-separated)"
        required: false
        default: "1.05,1.25,1.50,1.80,2.20,3.00"
      grid:
        description: "Surface grid or config"
        required: false
        default: "HARD,CLAY,GRASS,INDOOR"

permissions:
  contents: read

concurrency:
  group: courtsense-${{ github.ref }}
  cancel-in-progress: false

jobs:
  backtest:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # 1) Checkout
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2) Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3) Cache pip (best effort)
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4) Install deps (fallback to essentials if no requirements)
      - name: Install dependencies
        shell: bash
        run: |
          set -e
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install --upgrade pip
            pip install pandas numpy requests pyyaml beautifulsoup4
          fi

      # 5) (Optional) Prepare dataset. If your upstream step/script creates
      #    data/historical_matches.csv, great. If not, we create an empty one
      #    so the next step can exit cleanly with a summary.
      - name: Ensure dataset exists (safe no-op if present)
        shell: bash
        run: |
          set -e
          mkdir -p data
          if [ ! -f data/historical_matches.csv ]; then
            python - <<'PY'
import pandas as pd, os
cols = ["date","tournament","round","player1","player2","odds1","odds2","result"]
pd.DataFrame(columns=cols).to_csv("data/historical_matches.csv", index=False)
print("Created empty data/historical_matches.csv")
PY
          fi

      # 6) Backtest â€” skip gracefully on 0 rows or missing file
      - name: Backtest (skip gracefully on 0 rows)
        shell: bash
        run: |
          set -e
          SUMMARY=backtest_summary.md
          RESULTS=backtest_results.csv

          echo "# TE8 Backtest Summary" > "$SUMMARY"
          echo "" >> "$SUMMARY"

          if [ -s data/historical_matches.csv ]; then
            N=$(python - <<'EOF'
import pandas as pd
try:
    df = pd.read_csv('data/historical_matches.csv')
    print(len(df))
except Exception as e:
    print(0)
EOF
)
            echo "Detected $N rows in dataset."
            if [ "$N" = "0" ]; then
              echo "No rows to backtest (0 linked games)." >> "$SUMMARY"
            else
              python backtest_te8.py \
                --input data/historical_matches.csv \
                --start "${{ github.event.inputs.start_date }}" \
                --end   "${{ github.event.inputs.end_date }}" \
                --bands "${{ github.event.inputs.bands }}" \
                --grid  "${{ github.event.inputs.grid }}" \
                --out-csv "$RESULTS"

              if [ -f "$RESULTS" ]; then
                echo "Backtest completed. Results written to $RESULTS." >> "$SUMMARY"
              else
                echo "Backtest ran but no results file was produced." >> "$SUMMARY"
              fi
            fi
          else
            echo "Dataset missing or unreadable: data/historical_matches.csv" >> "$SUMMARY"
          fi

      # 7) Always upload artifacts so you can inspect outputs even on soft-fail
      - name: Upload summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backtest_summary
          path: backtest_summary.md

      - name: Upload results (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backtest_results
          path: backtest_results.csv
          if-no-files-found: ignore
