name: Courtsense CI

on:
  workflow_dispatch:
    inputs:
      start_date:
        description: "YYYY-MM-DD"
        required: false
        default: "2024-01-01"
      end_date:
        description: "YYYY-MM-DD"
        required: false
        default: "2024-12-31"

jobs:
  backtest:
    runs-on: ubuntu-latest
    env:
      START: ${{ github.event.inputs.start_date }}
      END:   ${{ github.event.inputs.end_date }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: bash
        run: |
          set -e
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy
          fi

      - name: Ensure dataset exists
        shell: bash
        run: |
          set -e
          mkdir -p data
          if [ ! -f data/historical_matches.csv ]; then
            python -c "import pandas as pd; pd.DataFrame(columns=['date','tournament','round','player1','player2','odds1','odds2','result']).to_csv('data/historical_matches.csv', index=False)"
          fi

      - name: Run backtest
        shell: bash
        run: |
          set -e
          START="${START:-2024-01-01}"
          END="${END:-2024-12-31}"

          echo "# TE8 Backtest Summary" > summary.md
          echo "" >> summary.md

          if [ -s data/historical_matches.csv ]; then
            # Adjust args here if your script needs more (e.g., --bands/--grid)
            python backtest_te8.py \
              --input data/historical_matches.csv \
              --start "$START" \
              --end   "$END" \
              --out-csv results.csv || true
          else
            echo "Dataset missing or empty." >> summary.md
          fi

      - name: Append metrics to summary (if present)
        shell: bash
        run: |
          set -e
          if [ -f backtest_metrics.json ]; then
            python -c "import json; m=json.load(open('backtest_metrics.json')); \
f=open('summary.md','a'); \
f.write('**Bets:** %d\\n\\n' % m.get('n_bets',0)); \
f.write('**Hit-rate:** %.2f%%\\n\\n' % (100*m.get('hit_rate',0))); \
f.write('**ROI:** %.2f%%\\n\\n' % (100*m.get('roi',0))); \
f.write('**Max DD (units):** %.2f\\n' % m.get('max_drawdown',0)); \
f.close()"
          elif [ -f results.csv ]; then
            echo "Backtest completed. See results.csv." >> summary.md
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backtest_outputs
          path: |
            summary.md
            results.csv
            backtest_metrics.json
          if-no-files-found: ignore
