name: Courtsense CI

on:
  workflow_dispatch:
    inputs:
      start_date:
        description: "YYYY-MM-DD"
        required: true
        default: "2024-01-01"
      end_date:
        description: "YYYY-MM-DD"
        required: true
        default: "2024-12-31"
  schedule:
    - cron: "15 6 * * *"  # daily 06:15 UTC

permissions:
  contents: read

jobs:
  backtest:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        bands:
          - "1.05,1.25,1.50,1.80,2.20,3.00"
          - "1.10,1.30,1.55,1.85,2.20,3.00"
          - "1.15,1.35,1.60,1.90,2.30,3.20"
        grid: [ "HARD,CLAY,GRASS,INDOOR", "HARD,CLAY" ]
    env:
      START_DATE: ${{ github.event.inputs.start_date }}
      END_DATE:   ${{ github.event.inputs.end_date }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        shell: bash
        run: |
          set -e
          pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy requests pyyaml beautifulsoup4
          fi

      - name: Build dataset
        shell: bash
        run: |
          set -e
          mkdir -p data raw
          if [ -f scripts/build_dataset.py ]; then
            python scripts/build_dataset.py
          else
            python -c "import os; os.makedirs('data', exist_ok=True); import pandas as pd; cols=['date','tournament','round','player1','player2','odds1','odds2','result']; pd.DataFrame(columns=cols).to_csv('data/historical_matches.csv', index=False); print('Created empty data/historical_matches.csv')"
          fi

      - name: Backtest (matrix)
        shell: bash
        run: |
          set -e

          # Resolve defaults in bash
          START="${START_DATE:-2024-01-01}"
          END="${END_DATE:-2024-12-31}"

          SUMMARY="summary.md"
          RESULTS="results.csv"

          # Save params (printf is safest)
          MATRIX_BANDS="${{ matrix.bands }}"
          MATRIX_GRID="${{ matrix.grid }}"
          printf '%s' \
          "{\"bands\":\"${MATRIX_BANDS}\",\"grid\":\"${MATRIX_GRID}\",\"start\":\"${START}\",\"end\":\"${END}\"}" \
          > params.json

          echo "# TE8 Backtest Summary" > "$SUMMARY"
          echo "" >> "$SUMMARY"

          if [ -s data/historical_matches.csv ]; then
            python backtest_te8.py \
              --input data/historical_matches.csv \
              --start "$START" \
              --end   "$END" \
              --bands "${{ matrix.bands }}" \
              --grid  "${{ matrix.grid }}" \
              --out-csv "$RESULTS"
          else
            echo "Dataset missing or empty." >> "$SUMMARY"
          fi

          # Append metrics safely inside Python
          if [ -f backtest_metrics.json ]; then
            python - <<'PY'
import json

with open("backtest_metrics.json") as f:
    m = json.load(f)

with open("summary.md", "a") as out:
    out.write(f"**Bets:** {m.get('n_bets', 0)}\n\n")
    out.write(f"**Hit-rate:** {m.get('hit_rate', 0):.2%}\n\n")
    out.write(f"**ROI:** {m.get('roi', 0):.2%}\n\n")
    out.write(f"**Max DD (units):** {m.get('max_drawdown', 0):.2f}\n")
PY
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "run_${{ matrix.bands }}_${{ matrix.grid }}"
          path: |
            summary.md
            results.csv
            params.json
            backtest_metrics.json
          if-no-files-found: ignore

  collate:
    runs-on: ubuntu-latest
    needs: backtest
    steps:
      - name: Download all run artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install pandas
        shell: bash
        run: pip install pandas

      - name: Rank matrix and create report
        shell: bash
        run: |
          set -e
          python - <<'PY'
import os, json, glob, pandas as pd
rows=[]
for d in glob.glob("artifacts/*"):
    params_path = os.path.join(d,"params.json")
    metrics_path = os.path.join(d,"backtest_metrics.json")
    params = json.load(open(params_path)) if os.path.exists(params_path) else {}
    metrics = json.load(open(metrics_path)) if os.path.exists(metrics_path) else {}
    rows.append({**params, **metrics, "artifact": os.path.basename(d)})

df=pd.DataFrame(rows)
if df.empty:
    open("index.html","w").write("<h1>No artifacts found</h1>")
    pd.DataFrame().to_csv("matrix_rankings.csv",index=False)
else:
    df=df.fillna({'roi':0,'hit_rate':0,'n_bets':0,'max_drawdown':0})
    df['roi_rank']=df['roi'].rank(ascending=False,method='min')
    df.sort_values(['roi','hit_rate'], ascending=[False,False], inplace=True)
    df.to_csv("matrix_rankings.csv", index=False)
    open("index.html","w").write("<h1>Courtsense Backtest Matrix</h1>"+df.to_html(index=False))
PY

      - name: Upload matrix report
        uses: actions/upload-artifact@v4
        with:
          name: matrix_report
          path: |
            index.html
            matrix_rankings.csv
