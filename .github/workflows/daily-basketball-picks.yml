      - name: Print SHORTLIST by League (NBA/EuroLeague) — OFFICIAL (Kelly + Odds)
        run: |
          python << 'PY'
          import os, pandas as pd

          # ---- OFFICIAL thresholds (Kelly + odds) ----
          ODDS_FAV_MIN, ODDS_FAV_MAX = 1.25, 1.80
          ODDS_DOG_MIN, ODDS_DOG_MAX = 2.20, 4.50
          MIN_KELLY = 0.03
          KELLY_CAP = 0.25

          def section(df, league):
              sub = df[df["league"].str.upper()==league].copy()
              header = [f"## {league} Picks (OFFICIAL)"]

              if sub.empty:
                  header += [
                      "**🏆 Top Favorite:** _None_",
                      "**🏆 Top Underdog:** _None_",
                      "\n**Favorites (EV-sorted)**\n_None_",
                      "\n**Underdogs (EV-sorted)**\n_None_\n",
                  ]
                  return "\n".join(header)

              # Deduplicate by game
              sub["match_id"] = sub.apply(lambda r: " :: ".join(sorted([str(r["team"]), str(r["opponent"])])), axis=1)
              sub = sub.sort_values("ev_per_unit", ascending=False).groupby("match_id", as_index=False).head(1)

              # OFFICIAL filters
              favs = sub[
                  (sub["ev_per_unit"] > 0) &
                  (sub["kelly_fraction"] >= MIN_KELLY) &
                  (sub["best_odds"].between(ODDS_FAV_MIN, ODDS_FAV_MAX))
              ].sort_values(["ev_per_unit","blended_prob"], ascending=False)

              dogs = sub[
                  (sub["ev_per_unit"] > 0) &
                  (sub["kelly_fraction"] >= MIN_KELLY) &
                  (sub["best_odds"].between(ODDS_DOG_MIN, ODDS_DOG_MAX))
              ].sort_values(["ev_per_unit","blended_prob"], ascending=False)

              def star(lbl, d):
                  if d.empty: return f"**🏆 {lbl}:** _None_"
                  r = d.iloc[0]
                  return f"**🏆 {lbl}:** {r.team} vs {r.opponent} @ {r.best_odds:.2f} (p={r.blended_prob:.2f}, EV/u={r.ev_per_unit:.2f}, Kelly={min(KELLY_CAP, r.kelly_fraction):.2f})"

              def table(d):
                  if d.empty: return "_None_"
                  cols = ["commence_time_utc","team","opponent","best_odds","blended_prob","ev_per_unit","kelly_fraction"]
                  t = d[cols].round({"best_odds":2,"blended_prob":2,"ev_per_unit":2,"kelly_fraction":2})
                  head = "| "+" | ".join(cols)+" |\n|"+" | ".join(["---"]*len(cols))+"|\n"
                  body = "\n".join("| "+" | ".join(map(str,row))+" |" for row in t.values)
                  return head+body

              out = [
                  *header,
                  star("Top Favorite", favs),
                  star("Top Underdog", dogs),
                  "\n**Favorites (EV-sorted)**\n", table(favs.head(5)),
                  "\n**Underdogs (EV-sorted)**\n", table(dogs.head(5)),
              ]

              # Near-misses for visibility
              if favs.empty or dogs.empty:
                  nm = sub.sort_values("ev_per_unit", ascending=False).head(5)
                  cols = ["commence_time_utc","team","opponent","best_odds","blended_prob","ev_per_unit","kelly_fraction"]
                  nm = nm[cols].round({"best_odds":2,"blended_prob":2,"ev_per_unit":2,"kelly_fraction":2})
                  head = "| "+" | ".join(cols)+" |\n|"+" | ".join(["---"]*len(cols))+"|\n"
                  body = "\n".join("| "+" | ".join(map(str,row))+" |" for row in nm.values)
                  out += ["\n> _No official picks met Kelly+Odds. Near-misses (info only):_\n", head+body]

              out.append("")  # spacer
              return "\n".join(out)

          # ---------- load model output ----------
          df = pd.read_csv("basketball_value_picks_pro.csv")  # <-- Your NBA/EuroLeague model output file
          for c in ["blended_prob","best_odds","ev_per_unit","kelly_fraction"]:
              df[c] = pd.to_numeric(df.get(c), errors="coerce")
          df = df.dropna(subset=["best_odds","ev_per_unit","blended_prob","kelly_fraction"])

          summary = "\n\n".join([section(df,"NBA"), section(df,"EUROLEAGUE")])
          with open(os.environ["GITHUB_STEP_SUMMARY"], "a") as f:
              f.write(summary)
          PY
