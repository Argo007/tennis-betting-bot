name: Tennis Value Engine (Clean H2H)

on:
  workflow_dispatch: {}
  schedule:
    - cron: "5 6 * * *"

permissions:
  contents: read

concurrency:
  group: tennis-value-engine
  cancel-in-progress: true

env:
  TZ: Europe/Amsterdam

jobs:
  picks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas requests pytz

      # 0) Print repo tree early (so you see actual paths)
      - name: List workspace (before run)
        run: |
          echo "==== FILES (top 3 levels) ===="
          find . -maxdepth 3 -type f | sed 's|^\./||' | sort
          echo "==============================="

      # 1) Run your producer script (auto-detect path & name)
      - name: Run model (produce shortlist)
        env:
          ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
          LOOKAHEAD_HOURS: "24"
          REGIONS: "eu,uk,us,au"
          MARKETS: "h2h,spreads,totals"
          SPORT_KEYS: "tennis,tennis_atp,tennis_wta"
          KELLY_MIN: "0.05"
          EV_MIN: "0.00"
          MIN_CONF: "0.40"
          OUT_DIR: "outputs"
          SHORTLIST_FILE: "value_engine_shortlist.md"
        run: |
          set -euo pipefail

          # Try to locate the engine script automatically
          CAND=$(ls -1 **/*.py | grep -Ei '(tennis.*value.*engine|value.*engine).*\.py$' | head -n 1 || true)
          if [ -z "${CAND:-}" ]; then
            echo "ERROR: Could not find a producer script matching *tennis*value*engine*.py"
            echo "Repo files hint:"
            find . -maxdepth 3 -type f -name '*.py' | sed 's|^\./||' | sort
            exit 1
          fi
          echo "Producer script: $CAND"

          python "$CAND"

          # Not all repos write to outputs/… — keep going, converter will search .md files

      # 2) Convert shortlist Markdown -> CSV (auto-detect .md with the table header)
      - name: Convert shortlist MD to CSV
        run: |
          python - <<'PY'
          import pandas as pd, re, os, sys, glob

          # Find a markdown file that contains the expected header row
          HEADER = "| Tour | Market | Selection | Opponent | Odds | p_model | p_fair | EV/u | Kelly | Conf | Bet | Start (UTC) | Books | Source |"
          md_files = glob.glob("**/*.md", recursive=True)
          if not md_files:
              print("ERROR: No markdown files found to convert.", file=sys.stderr); sys.exit(1)

          src_md = None
          for f in sorted(md_files):
              try:
                  with open(f, encoding="utf-8") as fh:
                      text = fh.read()
                  if HEADER in text:
                      src_md = f
                      break
              except Exception:
                  continue
          if src_md is None:
              print("ERROR: Could not find a markdown file with the value-engine table header.", file=sys.stderr)
              print("Searched MD files:", len(md_files))
              sys.exit(1)

          print("Using shortlist:", src_md)

          lines = [l.rstrip("\n") for l in open(src_md, encoding="utf-8")]
          # Locate header line index precisely
          start = None
          for i, l in enumerate(lines):
              if l.strip().startswith(HEADER):
                  start = i; break
          if start is None:
              print("ERROR: Header not found after open.", file=sys.stderr); sys.exit(1)

          header = [c.strip() for c in lines[start].strip().strip("|").split("|")]
          data = []
          i = start + 2  # skip separator '|'---'|'
          while i < len(lines):
              l = lines[i].strip()
              if not l or not l.startswith("|"): break
              if l.startswith("|---"): i += 1; continue
              parts = [c.strip() for c in l.strip().strip("|").split("|")]
              if len(parts) != len(header): break
              data.append(dict(zip(header, parts)))
              i += 1

          if not data:
              print("WARNING: No rows parsed from shortlist table.")

          df = pd.DataFrame(data)
          # coerce numeric
          for col in ["Odds","p_model","p_fair","EV/u","Kelly","Conf"]:
              if col in df.columns:
                  df[col] = pd.to_numeric(df[col].replace({"": None}), errors="coerce")

          out_csv = "Tennis Value Engine Unified.csv"
          df.to_csv(out_csv, index=False)
          print("Wrote", out_csv, "rows:", len(df))
          PY

      # 3) Filter H2H + Kelly/EV, dedupe per matchup, publish summary
      - name: Filter & dedupe H2H; publish summary
        run: |
          python - <<'PY'
          import pandas as pd, glob, os, sys, re

          def norm(s): return re.sub(r'[^a-z0-9]', '', str(s).lower())

          csvs = glob.glob("**/*.csv", recursive=True)
          if not csvs:
              print("ERROR: No CSV files found.", file=sys.stderr); sys.exit(1)

          def score(p):
              b = norm(os.path.basename(p))
              prefer = all(k in b for k in ["tennis","value","engine","unified"])
              return (prefer, os.path.getsize(p))
          csvs.sort(key=score, reverse=True)
          src = csvs[0]

          df = pd.read_csv(src)

          def col(df, *names):
              for n in names:
                  if n in df.columns: return n
              lower = {c.lower(): c for c in df.columns}
              for n in names:
                  if n.lower() in lower: return lower[n.lower()]
              raise KeyError(f"Missing column: {names}")

          c_market = col(df, "Market","market")
          c_sel    = col(df, "Selection","selection")
          c_opp    = col(df, "Opponent","opponent")
          c_kelly  = col(df, "Kelly","kelly")
          c_evu    = col(df, "EV/u","evu","EVU","EV")
          c_odds   = df.columns[df.columns.str.lower().eq("odds")][0] if any(df.columns.str.lower().eq("odds")) else None

          df[c_kelly] = pd.to_numeric(df[c_kelly], errors="coerce")
          df[c_evu]   = pd.to_numeric(df[c_evu], errors="coerce")
          if c_odds: df[c_odds] = pd.to_numeric(df[c_odds], errors="coerce")

          # H2H only + filters
          df = df[df[c_market].astype(str).str.upper().eq("H2H")].copy()
          df = df[(df[c_kelly] > 0.05) & (df[c_evu] > 0)].copy()

          # Dedupe per unordered matchup
          def k(a,b):
              a,b = str(a).strip(), str(b).strip()
              return " | ".join(sorted([a,b]))
          df["__pair__"] = [k(a,b) for a,b in zip(df[c_sel], df[c_opp])]

          order_cols, asc = [c_kelly, c_evu], [False, False]
          if c_odds: order_cols.append(c_odds); asc.append(False)
          df.sort_values(order_cols, ascending=asc, inplace=True)
          df = df.drop_duplicates(["__pair__"], keep="first").copy()
          df.drop(columns="__pair__", inplace=True)

          df["Bet"] = "YES"
          preferred = ['Tour','Market','Selection','Opponent','Odds','p_model','p_fair','EV/u','Kelly','Conf','Bet','Start (UTC)','Books','Source']
          cols_out = [c for c in preferred if c in df.columns] or df.columns.tolist()
          df = df[cols_out]

          out_csv = "value_filtered_h2h.csv"
          df.to_csv(out_csv, index=False)

          def gfm(t):
              if t.empty: return "_No H2H picks passed filters._"
              lines = ["| " + " | ".join(t.columns) + " |",
                       "| " + " | ".join(["---"]*len(t.columns)) + " |"]
              for _, r in t.iterrows():
                  lines.append("| " + " | ".join(str(r[c]) for c in t.columns) + " |")
              return "\n".join(lines)

          with open(os.environ.get("GITHUB_STEP_SUMMARY","/tmp/gh_summary.md"), "a") as fh:
              fh.write(f"# Clean H2H Picks (source: {src})\n\n" + gfm(df) + "\n")
          print(f"Source: {src} -> value_filtered_h2h.csv (rows kept: {len(df)})")
          PY

      - name: Upload filtered picks
        uses: actions/upload-artifact@v4
        with:
          name: value_filtered_h2h
          path: value_filtered_h2h.csv
          if-no-files-found: error
