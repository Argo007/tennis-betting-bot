name: Tennis Picks (ATP/WTA)

on:
  schedule:
    - cron: "0 8 * * *"     # 08:00 UTC daily
  workflow_dispatch: {}

jobs:
  picks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas requests

      # --- Build Elo from last two seasons ---
      - name: Download ATP/WTA results
        run: |
          mkdir -p matches
          curl -sSL -o matches/atp_matches_2023.csv https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_matches_2023.csv
          curl -sSL -o matches/atp_matches_2024.csv https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/atp_matches_2024.csv
          curl -sSL -o matches/wta_matches_2023.csv https://raw.githubusercontent.com/JeffSackmann/tennis_wta/master/wta_matches_2023.csv
          curl -sSL -o matches/wta_matches_2024.csv https://raw.githubusercontent.com/JeffSackmann/tennis_wta/master/wta_matches_2024.csv

      - name: Generate Elo
        run: |
          python - <<'PY'
          import pandas as pd, glob, os
          START, K = 1500, 32
          def exp(a,b): return 1/(1+10**((b-a)/400))
          def upd(a,b,s): return a + K*(s-exp(a,b))
          def calc(pattern):
              files = glob.glob(pattern)
              if not files: raise SystemExit("No match files for Elo.")
              df = pd.concat((pd.read_csv(f) for f in files), ignore_index=True)
              E={}
              for _,r in df.iterrows():
                  w,l = r['winner_name'], r['loser_name']
                  ew,el = E.get(w,START), E.get(l,START)
                  E[w]=upd(ew,el,1); E[l]=upd(el,ew,0)
              return pd.DataFrame([{'player':k,'elo':v} for k,v in E.items()])
          os.makedirs("data", exist_ok=True)
          calc("matches/atp_matches_*.csv").to_csv("data/atp_elo.csv", index=False)
          calc("matches/wta_matches_*.csv").to_csv("data/wta_elo.csv", index=False)
          print("Elo ready.")
          PY

      # --- Your pricing/model step (produces value_picks_pro.csv) ---
      - name: Run model (fetch odds & price value)
        env:
          ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
        run: |
          python tennis_value_picks_pro.py --region eu --lookahead-h 24 --out value_picks_pro.csv

      # --- Clean, color-coded summary (INLINE ENGINE: no missing file) ---
      - name: Publish picks (clean, color-coded)
        env:
          LOOKAHEAD_H: "24"     # adjust: 12 / 24 / 48
          MIN_CONF:    "50"     # confidence threshold
          BANKROLL:    "200"    # â‚¬ to show stake hints (set "0" to hide)
        run: |
          python - <<'PY'
          import os, pandas as pd
          from datetime import datetime, timezone, timedelta

          # ---- settings from env ----
          LOOKAHEAD_H = int(os.getenv("LOOKAHEAD_H","24"))
          MIN_CONF    = int(os.getenv("MIN_CONF","50"))
          BANKROLL    = float(os.getenv("BANKROLL","0"))
          BUF_MIN     = 5
          DOG_MIN, DOG_MAX = 1.90, 6.00
          FAV_MIN, FAV_MAX = 1.15, 2.00
          TE8_FAV, TE8_DOG = 0.50, 0.60

          # ---- helpers ----
          def elo_rating(df, name):
              r = df[df["player"] == str(name)]
              return float(r["elo"].iloc[0]) if not r.empty else 1500.0
          def elo_prob(df, p1, p2):
              e1 = elo_rating(df,p1); e2 = elo_rating(df,p2)
              return 1.0/(1.0+10.0**((e2-e1)/400.0))
          def kelly(p, odds):
              if not (0<=p<=1) or odds<=1: return 0.0
              b = odds-1.0
              return max((odds*p-1.0)/b, 0.0)
          def te8(row):
              conf = float(row.get("confidence",0))
              form = 0.50 + 0.30*max(0,min(1,conf/100.0))
              eta  = float(row.get("eta_min",240))
              rest = 0.55 if eta<90 else (0.60 if eta<240 else 0.65)
              surface, h2h, stage, mental, injury = 0.60, 0.55, 0.55, 0.60, 0.90
              return round((form+surface+h2h+rest+injury+stage+mental)/7.0,2)
          def eta_fmt(m):
              m=int(round(m)); h,mm=divmod(m,60); return f"{h}h {mm:02d}m" if h else f"{mm}m"
          def ts_fmt(ts): return pd.to_datetime(ts, utc=True).strftime("%Y-%m-%d %H:%M UTC")
          def badge(ok): return "ðŸŸ¢ **BET**" if ok else "ðŸ”´ **PASS**"

          # ---- load data ----
          atp = pd.read_csv("data/atp_elo.csv")
          wta = pd.read_csv("data/wta_elo.csv")
          df  = pd.read_csv("value_picks_pro.csv")

          for c in ["blended_prob","best_odds","confidence"]:
              if c in df.columns: df[c]=pd.to_numeric(df[c], errors="coerce")
          if "confidence" not in df.columns: df["confidence"]=0

          # time filters
          if "commence_time_utc" in df.columns:
              df["start_dt"]=pd.to_datetime(df["commence_time_utc"], utc=True, errors="coerce")
          elif "commence_time" in df.columns:
              df["start_dt"]=pd.to_datetime(df["commence_time"], utc=True, errors="coerce")
          else:
              df["start_dt"]=pd.NaT

          now = datetime.now(timezone.utc)
          cut = now + timedelta(minutes=BUF_MIN)
          horizon = now + timedelta(hours=LOOKAHEAD_H)

          if "is_live" in df.columns:
              df = df[~df["is_live"].fillna(False).astype(bool)]
          if "status" in df.columns:
              df = df[~df["status"].astype(str).str.contains("live|in ?play|started|progress", case=False, na=False)]

          df = df[df["start_dt"].notna() & (df["start_dt"]>=cut) & (df["start_dt"]<=horizon)]
          df = df[df["confidence"].fillna(0) >= MIN_CONF]
          if df.empty:
              with open(os.environ.get("GITHUB_STEP_SUMMARY","summary.md"),"w") as f:
                  f.write(f"_No eligible matches in â‰¤{LOOKAHEAD_H}h window (min_conf={MIN_CONF})._")
              raise SystemExit(0)

          df["eta_min"] = (df["start_dt"] - now).dt.total_seconds()/60.0

          # compute picks
          rows=[]
          for _,r in df.iterrows():
              tour = str(r.get("tour","")).upper()
              elo_df = atp if tour=="ATP" else wta
              odds = float(r.get("best_odds", float("nan")))
              if not (odds>1): continue
              p = elo_prob(elo_df, str(r["player"]), str(r["opponent"]))
              k = kelly(p, odds)
              is_dog = (DOG_MIN <= odds <= DOG_MAX)
              if is_dog and k>0: k = 0.25*k     # micro-cap
              score = te8(r)
              thresh = TE8_DOG if is_dog else TE8_FAV
              bet = (k>0) and (score>=thresh)
              rows.append({
                  "tour": tour, "player": r["player"], "opponent": r["opponent"],
                  "odds": round(odds,2), "prob": round(p,3), "kelly": round(k,3),
                  "te8": score, "bet": bet, "start": r["start_dt"], "eta": float(r["eta_min"])
              })

          X = pd.DataFrame(rows)
          if X.empty:
              with open(os.environ.get("GITHUB_STEP_SUMMARY","summary.md"),"w") as f:
                  f.write(f"_No qualified picks after TE8/Kelly filters in â‰¤{LOOKAHEAD_H}h window._")
              raise SystemExit(0)

          X = X.sort_values(["start","kelly"], ascending=[True,False])

          header = f"_Filtered at {now.strftime('%Y-%m-%d %H:%M UTC')} Â· upcoming-only (â‰¤{LOOKAHEAD_H}h, buffer {BUF_MIN}m) Â· min_conf={MIN_CONF}._"
          lines=[header,""]

          for tour in ["ATP","WTA"]:
              sub = X[X["tour"]==tour]
              if sub.empty: continue
              lines.append(f"## {tour} Picks")
              for _,r in sub.iterrows():
                  stake = f" â€¢ Stakeâ‰ˆâ‚¬{BANKROLL*r['kelly']:.2f}" if BANKROLL>0 and r["kelly"]>0 else ""
                  lines.append(
                      f"{badge(r['bet'])} â€” {r['player']} vs {r['opponent']} â€” {r['odds']:.2f}  \n"
                      f"p={r['prob']:.2f} â€¢ Kelly={r['kelly']:.3f} â€¢ TE8={r['te8']:.2f}{stake}  \n"
                      f"ðŸ—“ {ts_fmt(r['start'])} â€¢ ETA: {eta_fmt(r['eta'])}"
                  )
              lines.append("")

          with open(os.environ.get("GITHUB_STEP_SUMMARY","summary.md"),"w",encoding="utf-8") as f:
              f.write("\n".join(lines))
          print("Summary written.")
          PY
