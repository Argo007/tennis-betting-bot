name: Tennis Value Engine (Daily Picks)

on:
  workflow_dispatch:
    inputs:
      input_csv:
        description: "Input odds CSV (two-sided or flat)"
        required: false
        default: "data/raw/odds/sample_odds.csv"
      min_edge:
        description: "Min raw edge filter (0.00–0.05 typical)"
        required: false
        default: "0.00"
      use_te:
        description: "Use True Edge boost (yes/no)"
        required: false
        default: "yes"
      te_edge:
        description: "True Edge base (TE8=0.08)"
        required: false
        default: "0.08"
      stake_mode:
        description: "Stake mode"
        required: false
        default: "kelly"
      kelly_scale:
        description: "Kelly scaling (0.5 = half-Kelly)"
        required: false
        default: "0.5"
      kelly_cap:
        description: "Per-bet cap as fraction of BR"
        required: false
        default: "0.20"
      bankroll:
        description: "Starting bankroll (units)"
        required: false
        default: "1000"
      bands:
        description: "Odds bands (matrix) e.g. 2.0,2.6|2.6,3.2|3.2,4.0"
        required: false
        default: "2.0,2.6|2.6,3.2|3.2,4.0"

jobs:
  value-engine:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Ensure outputs dir
        run: mkdir -p outputs

      # -------- Probability enrichment (vig-free, within-window) --------
      - name: Build probability-enriched file
        run: |
          python scripts/compute_prob_vigfree.py \
            --input "${{ github.event.inputs.input_csv }}" \
            --output outputs/prob_enriched.csv \
            --window-low 1.35 --window-high 2.40

      - name: Probability diagnostics (markdown)
        run: |
          python scripts/check_probabilities.py \
            --input outputs/prob_enriched.csv \
            --min-edge 0.02 \
            > outputs/diag_prob.md

      # -------- Decision engine (picks + summaries) --------
      - name: Run decision engine
        run: |
          python scripts/tennis_value_engine.py \
            --input outputs/prob_enriched.csv \
            --out-final outputs/picks_final.csv \
            --summary outputs/engine_summary.md \
            --min-edge "${{ github.event.inputs.min_edge }}" \
            --stake-mode "${{ github.event.inputs.stake_mode }}" \
            --edge "${{ github.event.inputs.te_edge }}" \
            --kelly-scale "${{ github.event.inputs.kelly_scale }}" \
            --kelly-cap "${{ github.event.inputs.kelly_cap }}" \
            --bankroll "${{ github.event.inputs.bankroll }}"

      # -------- Matrix backtest (on the same day’s input) --------
      - name: Run matrix backtest (TE + Kelly)
        env:
          BANDS: ${{ github.event.inputs.bands }}
          MIN_EDGE_TE: ${{ github.event.inputs.te_edge }}
          KELLY_SCALE: ${{ github.event.inputs.kelly_scale }}
          BANKROLL: ${{ github.event.inputs.bankroll }}
        run: |
          set -e
          python scripts/run_matrix_backtest.py \
            --input outputs/prob_enriched.csv \
            --outdir outputs \
            --bands "$BANDS" \
            --stake-mode kelly \
            --edge "$MIN_EDGE_TE" \
            --kelly-scale "$KELLY_SCALE" \
            --bankroll "$BANKROLL" || true

          # Fallback with a tiny synthetic CSV if nothing ranked
          if [ ! -s outputs/matrix_rankings.csv ]; then
            echo "No matrix rankings produced; falling back to synthetic CSV."
            cat > outputs/synthetic_backtest.csv <<'CSV'
odds,p,result
2.10,0.55,1
2.40,0.45,0
2.80,0.40,1
2.00,0.35,0
3.20,0.35,0
2.30,0.48,1
3.50,0.32,0
CSV
            python scripts/run_matrix_backtest.py \
              --input outputs/synthetic_backtest.csv \
              --outdir outputs \
              --bands "$BANDS" \
              --stake-mode kelly \
              --edge "$MIN_EDGE_TE" \
              --kelly-scale "$KELLY_SCALE" \
              --bankroll "$BANKROLL" || true
          fi

      # -------- Publish job summaries --------
      - name: Publish summaries
        shell: bash
        run: |
          echo "## Pipeline Summary" >> "$GITHUB_STEP_SUMMARY"
          if [ -f outputs/engine_summary.md ]; then
            cat outputs/engine_summary.md >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- Engine summary not produced." >> "$GITHUB_STEP_SUMMARY"
          fi

          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### Probability Diagnostics" >> "$GITHUB_STEP_SUMMARY"
          if [ -f outputs/diag_prob.md ]; then
            cat outputs/diag_prob.md >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- Probability diagnostics not produced." >> "$GITHUB_STEP_SUMMARY"
          fi

          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### Matrix Backtest — Best by ROI" >> "$GITHUB_STEP_SUMMARY"
          python - <<'PY' >> "$GITHUB_STEP_SUMMARY" || true
import json, pathlib
p = pathlib.Path("outputs/backtest_metrics.json")
if not p.exists() or p.stat().st_size==0:
    print("- No metrics available.")
else:
    j = json.loads(p.read_text())
    b = (j or {}).get("best_by_roi") or {}
    print(f"- **Config:** {b.get('config_id','-')}")
    print(f"- **Band:** {b.get('label','-')}")
    if b:
        print(f"- **Bets:** {b.get('bets',0):.0f} | **ROI:** {b.get('roi',0):.4f} | **PnL:** {b.get('pnl',0):.4f} | **End BR:** {b.get('end_bankroll',0):.4f}")
PY

      # -------- Upload artifacts --------
      - name: Upload artifact bundle
        uses: actions/upload-artifact@v4
        with:
          name: value-engine-output
          path: |
            outputs/prob_enriched.csv
            outputs/picks_final.csv
            outputs/engine_summary.md
            outputs/value_engine_shortlist.md
            outputs/results.csv
            outputs/matrix_rankings.csv
            outputs/backtest_metrics.json
            outputs/diag_prob.md
            outputs/synthetic_backtest.csv
          if-no-files-found: warn
