name: Tennis Value Engine (Daily Picks)

on:
  workflow_dispatch:
    inputs:
      # -------- probability enrichment (vig-free) --------
      input_csv:
        description: "Input odds CSV (two-sided or flat)"
        required: false
        default: "data/raw/odds/sample_odds.csv"
      gamma:
        description: "Fav/longshot stretch (1=no change)"
        required: false
        default: "1.05"

      # -------- engine knobs --------
      min_edge:
        description: "Min (p_model - 1/odds) to accept a pick"
        required: false
        default: "0.02"
      stake_mode:
        description: "Stake mode"
        required: false
        default: "kelly"
      edge:
        description: "True Edge booster (0.08 = TE8)"
        required: false
        default: "0.08"
      kelly_scale:
        description: "Kelly safety scaler"
        required: false
        default: "0.5"
      kelly_cap:
        description: "Cap stake as fraction of bankroll"
        required: false
        default: "0.20"
      flat_stake:
        description: "Units per bet if flat staking"
        required: false
        default: "1"
      bankroll:
        description: "Starting bankroll"
        required: false
        default: "1000"
      max_picks:
        description: "Maximum picks to output (sorted by edge)"
        required: false
        default: "80"
      elo_atp:
        description: "Path to ATP Elo CSV (optional)"
        required: false
        default: ""
      elo_wta:
        description: "Path to WTA Elo CSV (optional)"
        required: false
        default: ""

      # -------- backtest matrix (optional but handy) --------
      bands:
        description: "Odds bands (e.g. 2.0,2.6|2.6,3.2|3.2,4.0)"
        required: false
        default: "2.0,2.6|2.6,3.2|3.2,4.0"

      # Publish summary to the job page
      publish_md:
        description: "Append summaries to job page"
        required: false
        default: "yes"

jobs:
  value-engine:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Upgrade pip + deps
        shell: bash
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Locate scripts (root or scripts/)
        id: where
        shell: bash
        run: |
          if [ -f scripts/tennis_value_engine.py ]; then
            echo "scripts_path=scripts" >> "$GITHUB_OUTPUT"
          else
            echo "scripts_path=." >> "$GITHUB_OUTPUT"
          fi
          echo "Using scripts at ${{ steps.where.outputs.scripts_path }}"

      - name: Ensure outputs dir
        shell: bash
        run: mkdir -p outputs

      # -------- Build p_model from two-sided odds (vig-free + stretch) --------
      - name: Enrich probabilities (vig-free + stretch)
        shell: bash
        run: |
          S="${{ steps.where.outputs.scripts_path }}"
          IN="${{ github.event.inputs.input_csv }}"
          python "$S/compute_prob_vigfree.py" \
            --input "${IN:-data/raw/odds/sample_odds.csv}" \
            --out outputs/prob_enriched.csv \
            --gamma "${{ github.event.inputs.gamma }}"

      # -------- Decision engine (Kelly + TE) --------
      - name: Run decision engine
        shell: bash
        run: |
          set -euo pipefail
          S="${{ steps.where.outputs.scripts_path }}"
          python "$S/tennis_value_engine.py" \
            --input outputs/prob_enriched.csv \
            --out-picks value_picks_pro.csv \
            --out-final outputs/picks_final.csv \
            --summary outputs/engine_summary.md \
            --stake-mode "${{ github.event.inputs.stake_mode }}" \
            --edge "${{ github.event.inputs.edge }}" \
            --kelly-scale "${{ github.event.inputs.kelly_scale }}" \
            --kelly-cap "${{ github.event.inputs.kelly_cap }}" \
            --flat-stake "${{ github.event.inputs.flat_stake }}" \
            --bankroll "${{ github.event.inputs.bankroll }}" \
            --min-edge "${{ github.event.inputs.min_edge }}" \
            --max-picks "${{ github.event.inputs.max_picks }}" \
            ${ELO_ATP:+--elo-atp "$ELO_ATP"} \
            ${ELO_WTA:+--elo-wta "$ELO_WTA"}
        env:
          ELO_ATP: ${{ github.event.inputs.elo_atp }}
          ELO_WTA: ${{ github.event.inputs.elo_wta }}

      - name: Publish engine summary
        if: ${{ github.event.inputs.publish_md == 'yes' }}
        shell: bash
        run: |
          echo "## Tennis Value â€” Daily Picks" >> "$GITHUB_STEP_SUMMARY"
          if [ -f outputs/engine_summary.md ]; then
            cat outputs/engine_summary.md >> "$GITHUB_STEP_SUMMARY"
          else
            echo "No engine_summary.md produced." >> "$GITHUB_STEP_SUMMARY"
          fi

      # -------- Optional: quick matrix backtest on synthetic set if nothing to test --------
      - name: Run matrix backtest (robust)
        shell: bash
        run: |
          S="${{ steps.where.outputs.scripts_path }}"
          BANDS="${{ github.event.inputs.bands }}"
          # Try to backtest the enriched (requires odds + p + result). If not available, synthesize.
          # First, attempt real backtest (will likely no-op if 'result' missing).
          python "$S/run_matrix_backtest.py" \
            --input outputs/prob_enriched.csv \
            --outdir outputs \
            --bands "$BANDS" \
            --stake-mode kelly \
            --edge 0.08 \
            --kelly-scale 0.5 \
            --bankroll 100 || true

          LINES=$( [ -f outputs/matrix_rankings.csv ] && wc -l < outputs/matrix_rankings.csv || echo 0 )
          if [ "$LINES" -le 1 ]; then
            printf '%s\n' \
              'odds,p,result' \
              '2.10,0.55,1' \
              '2.40,0.45,0' \
              '2.80,0.40,1' \
              '3.20,0.35,0' \
              '2.30,0.48,1' \
              '3.50,0.32,0' \
              > outputs/synthetic_backtest.csv

            python "$S/run_matrix_backtest.py" \
              --input outputs/synthetic_backtest.csv \
              --outdir outputs \
              --bands "$BANDS" \
              --stake-mode kelly \
              --edge 0.08 \
              --kelly-scale 0.5 \
              --bankroll 100 || true
          fi

      - name: Backtest summary (best by ROI)
        if: ${{ github.event.inputs.publish_md == 'yes' }}
        shell: bash
        run: |
          S="${{ steps.where.outputs.scripts_path }}"
          python "$S/quick_summary.py" > summary.md || true
          echo "" >> "$GITHUB_STEP_SUMMARY"
          cat summary.md >> "$GITHUB_STEP_SUMMARY" || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: value-engine-output
          path: |
            value_picks_pro.csv
            outputs/picks_final.csv
            outputs/engine_summary.md
            outputs/prob_enriched.csv
            outputs/results.csv
            outputs/matrix_rankings.csv
            outputs/backtest_metrics.json
          if-no-files-found: warn
