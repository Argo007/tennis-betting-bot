name: Matrix Backtest (Kelly + TE)

on:
  workflow_dispatch:
    inputs:
      dataset:
        description: "Path to CSV (optional). Falls back to outputs/prob_enriched.csv -> data/raw/vigfree_matches.csv -> data/raw/odds/sample_odds.csv"
        required: false
        default: ""
      bands:
        description: "Edge bands like 1.2,2.0|2.0,3.2|3.2,4.0"
        required: true
        default: "1.2,2.0|2.0,3.2|3.2,4.0"
      staking:
        description: "Staking method"
        required: true
        default: "kelly"
      kelly_scale:
        description: "Kelly scaler (0.5 = half Kelly)"
        required: true
        default: "0.5"
      bankroll:
        description: "Starting bankroll (units)"
        required: true
        default: "1000"
      min_edge:
        description: "Minimum true edge to consider (e.g. 0.00 = none)"
        required: true
        default: "0.00"

jobs:
  backtest:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pandas

      - name: Resolve dataset path
        id: ds
        run: |
          set -euo pipefail

          INPUT="${{ github.event.inputs.dataset }}"
          # Ordered fallbacks
          F1="outputs/prob_enriched.csv"
          F2="data/raw/vigfree_matches.csv"
          F3="data/raw/odds/sample_odds.csv"

          pick_first_existing () {
            for p in "$@"; do
              if [ -n "$p" ] && [ -f "$p" ]; then
                echo "$p"; return 0
              fi
            done
            echo ""
          }

          if [ -n "$INPUT" ]; then
            SRC="$INPUT"
          else
            SRC=$(pick_first_existing "$F1" "$F2" "$F3")
          fi

          if [ -z "$SRC" ]; then
            echo "::error title=dataset::No usable dataset found."
            exit 1
          fi

          echo "src=$SRC" >> "$GITHUB_OUTPUT"
          echo "[dataset] Using: $SRC"

      - name: Prepare dataset -> outputs/prob_enriched.csv
        run: |
          set -euo pipefail
          INP="${{ steps.ds.outputs.src }}"
          OUT="outputs/prob_enriched.csv"

          # Always normalize so pa/pb exist (idempotent if already present)
          python scripts/prepare_dataset.py --input "$INP" --output "$OUT"

      - name: Enrich edges (EdgeSmith)
        run: |
          set -euo pipefail
          python scripts/edge_smith_enrich.py \
            --input outputs/prob_enriched.csv \
            --output outputs/edge_enriched.csv \
            --min-edge ${{ inputs.min_edge }}

      - name: Run matrix backtest
        run: |
          set -euo pipefail
          python scripts/run_matrix_backtest.py \
            --dataset outputs/prob_enriched.csv \
            --min-edge ${{ inputs.min_edge }} \
            --staking ${{ inputs.staking }} \
            --kelly-scale ${{ inputs.kelly_scale }} \
            --bankroll ${{ inputs.bankroll }} \
            --bands "${{ inputs.bands }}"

      - name: Generate HTML report
        run: |
          set -euo pipefail
          # Your existing report generator â€“ it reads backtests outputs
          python scripts/generate_report.py

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: matrix-backtest-${{ github.run_id }}
          path: |
            outputs/prob_enriched.csv
            outputs/edge_enriched.csv
            results/backtests/**
            docs/backtests/**
          if-no-files-found: warn
