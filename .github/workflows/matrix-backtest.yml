name: Matrix Backtest (Kelly + TE)

on:
  workflow_dispatch:

jobs:
  backtest:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    env:
      # ---- Tunables (safe, slightly loose so bets appear) ----
      MIN_EDGE: "0.02"          # 2% min edge filter for the backtest
      STAKING: "kelly"          # {kelly|flat}
      KELLY_SCALE: "0.5"        # half-Kelly
      BANKROLL: "1000"          # units
      BANDS: "1.0,10.0"         # single wide band (inclusive low, exclusive high)
      #
      # ---- File layout (donâ€™t change unless you move files) ----
      OUTDIR: "results/backtests"
      RAW_VIGFREE: "data/raw/vigfree_matches.csv"
      RAW_SAMPLE: "data/raw/odds/sample_odds.csv"
      OUT_PROB: "outputs/prob_enriched.csv"
      OUT_EDGE: "outputs/edge_enriched.csv"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # --------------------------------------------------------------------
      # 1) Build a guaranteed input (OUT_PROB) from any available source
      #    - Prefer vigfree_matches.csv
      #    - Else sample_odds.csv
      #    - Adds pa/pb if missing (from odds)
      # --------------------------------------------------------------------
      - name: Prepare dataset -> $OUT_PROB
        run: |
          set -euo pipefail

          mkdir -p outputs

          # choose best available raw
          INPUT=""
          if [ -f "$RAW_VIGFREE" ]; then
            INPUT="$RAW_VIGFREE"
          elif [ -f "$RAW_SAMPLE" ]; then
            INPUT="$RAW_SAMPLE"
          else
            echo "ERROR: no input found ($RAW_VIGFREE nor $RAW_SAMPLE)."
            exit 1
          fi

          echo "[dataset] Using: $INPUT"

          python - <<'PY'
          import csv, math, sys, pathlib
          from pathlib import Path

          raw_path = Path("${INPUT}")
          out_path = Path("${OUT_PROB}")

          # columns we might see
          aliases = {
              "oa": ["oa","odds_a","odds_a_vigfree","odds_a_vig_free","odds_a_"],
              "ob": ["ob","odds_b","odds_b_vigfree","odds_b_vig_free","odds_b_"],
              "pa": ["pa","prob_a","probA","p_a","implied_prob_a","implied_pa","prob_a_vigfree","prob_a_vig_free"],
              "pb": ["pb","prob_b","probB","p_b","implied_prob_b","implied_pb","prob_b_vigfree","prob_b_vig_free"],
              "date": ["date","event_date"],
              "a": ["player_a","team_a","home"],
              "b": ["player_b","team_b","away"],
          }

          def pick_col(row, keys):
              for k in keys:
                  if k in row and row[k] not in (None,""):
                      return row[k]
              return None

          def inv_prob(odds):
              try:
                  o = float(odds)
                  return 0.0 if o<=0 else 1.0/o
              except:
                  return None

          with raw_path.open(newline="", encoding="utf-8") as f:
              reader = csv.DictReader(f)
              rows = list(reader)
              if not rows:
                  print("[prepare] No rows in input.", file=sys.stderr)
                  sys.exit(1)

              out_cols = ["date","player_a","player_b","oa","ob","pa","pb"]
              out = []

              for r in rows:
                  date = pick_col(r, aliases["date"])
                  a = pick_col(r, aliases["a"])
                  b = pick_col(r, aliases["b"])
                  oa = pick_col(r, aliases["oa"])
                  ob = pick_col(r, aliases["ob"])
                  pa = pick_col(r, aliases["pa"])
                  pb = pick_col(r, aliases["pb"])

                  # derive pa/pb from odds if missing
                  if (pa is None or pb is None) and oa and ob:
                      ia, ib = inv_prob(oa), inv_prob(ob)
                      if ia is not None and ib is not None and (ia+ib) > 0:
                          # normalize to remove vigorish
                          s = ia + ib
                          pa = str(ia/s)
                          pb = str(ib/s)

                  # must have at minimum oa, ob, pa, pb
                  if not (oa and ob and pa and pb and a and b):
                      continue

                  out.append({
                      "date": date or "",
                      "player_a": a, "player_b": b,
                      "oa": oa, "ob": ob,
                      "pa": pa, "pb": pb
                  })

              if not out:
                  print("[prepare] No usable rows after normalization.", file=sys.stderr)
                  sys.exit(1)

              out_path.parent.mkdir(parents=True, exist_ok=True)
              with out_path.open("w", newline="", encoding="utf-8") as wf:
                  w = csv.DictWriter(wf, fieldnames=out_cols)
                  w.writeheader()
                  w.writerows(out)

              print(f"[prepare] Wrote {len(out)} rows -> {out_path}")
          PY

      # --------------------------------------------------------------------
      # 2) Enrich with EdgeSmith (produces OUT_EDGE); do not filter here
      # --------------------------------------------------------------------
      - name: Enrich edges (EdgeSmith)
        run: |
          set -euo pipefail
          python scripts/edge_smith_enrich.py \
            --input  "${OUT_PROB}" \
            --output "${OUT_EDGE}" \
            --min-edge 0.0

          echo "[enrich] Wrote ${OUT_EDGE}"
          head -n 3 "${OUT_EDGE}" || true

      # --------------------------------------------------------------------
      # 3) Backtest (now apply MIN_EDGE and tuned params)
      # --------------------------------------------------------------------
      - name: Run matrix backtest
        run: |
          set -euo pipefail
          mkdir -p "${OUTDIR}"

          python scripts/run_matrix_backtest.py \
            --dataset "${OUT_EDGE}" \
            --min-edge "${MIN_EDGE}" \
            --staking "${STAKING}" \
            --kelly-scale "${KELLY_SCALE}" \
            --bankroll "${BANKROLL}" \
            --bands "${BANDS}"

      # --------------------------------------------------------------------
      # 4) Generate simple HTML summary (uses existing generate_report.py)
      # --------------------------------------------------------------------
      - name: Generate HTML report
        run: |
          python scripts/generate_report.py \
            --dataset "${OUT_EDGE}" \
            --outdir "${OUTDIR}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: matrix-backtest-${{ github.run_id }}
          path: |
            outputs/*.csv
            results/**
            ${OUTDIR}/**
          if-no-files-found: warn

