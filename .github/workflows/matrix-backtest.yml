name: Matrix Backtest (Kelly + TE)

on:
  workflow_dispatch:
    inputs:
      input_csv:
        description: "CSV with odds + probability + result"
        required: false
        default: "data/raw/odds/sample_odds.csv"
      bands:
        description: "Odds bands, e.g. 2.0,2.6|2.6,3.2|3.2,4.0"
        required: true
        default: "2.0,2.6|2.6,3.2|3.2,4.0"
      stake_mode:
        description: "kelly or flat"
        required: false
        default: "kelly"
      edge:
        description: "True edge (0.08 = TE8)"
        required: false
        default: "0.08"
      kelly_scale:
        description: "Kelly scaler (0.5 = half-Kelly)"
        required: false
        default: "0.5"
      flat_stake:
        description: "Units per bet if flat staking"
        required: false
        default: "1"
      bankroll:
        description: "Starting bankroll (units)"
        required: false
        default: "100"

jobs:
  backtest:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: python -m pip install -U pip

      - name: Ensure outputs dir
        run: mkdir -p outputs

      # Minimal + robust: no YAML trickery, we write a tiny helper file and run it.
      - name: Prepare backtest input (validate or synthesize)
        env:
          INPUT_CSV: ${{ github.event.inputs.input_csv }}
        run: |
          set -e
          echo 'from __future__ import annotations
import csv, os, random, pathlib, sys, json

in_arg = os.environ.get("INPUT_CSV") or "data/raw/odds/sample_odds.csv"
in_path = pathlib.Path(in_arg)
ok = False
hdr = []

if in_path.is_file():
    try:
        with in_path.open(newline="", encoding="utf-8") as f:
            r = csv.DictReader(f)
            hdr = r.fieldnames or []
            need_odds = {"odds","price","decimal_odds"}
            need_prob = {"p","prob","model_prob","p_model","probability"}
            need_res  = {"result","won","outcome","is_win","y","label"}
            has_odds = any(c in (hdr or []) for c in need_odds)
            has_prob = any(c in (hdr or []) for c in need_prob)
            has_res  = any(c in (hdr or []) for c in need_res)
            ok = has_odds and has_prob and has_res
    except Exception:
        ok = False

if ok:
    out = str(in_path)
else:
    out = "outputs/synthetic_backtest.csv"
    rows = []
    random.seed(7)
    for lo,hi in [(2.0,2.6),(2.6,3.2),(3.2,4.0)]:
        for _ in range(20):
            import math
            o = random.uniform(lo,hi)
            p = max(0.01, min(0.99, (1.0/o) * (1.0 + random.uniform(-0.05, 0.10))))
            win = 1 if random.random() < p else 0
            rows.append({"odds": f"{o:.3f}", "p": f"{p:.4f}", "result": win})
    with open(out, "w", newline="", encoding="utf-8") as f:
        w = csv.DictWriter(f, fieldnames=["odds","p","result"])
        w.writeheader(); w.writerows(rows)

# communicate to later steps
with open(os.environ["GITHUB_ENV"], "a") as envf:
    envf.write(f"BACKTEST_INPUT={out}\\n")

# also tell the job summary what happened
summary = f"**Backtest input**: `{out}`  \\n_Header detected_: {hdr if hdr else 'n/a (synthetic or no header)'}\\n"
with open(os.environ["GITHUB_STEP_SUMMARY"], "a") as sf:
    sf.write(summary)
' > prep_input.py
          python prep_input.py

      - name: Run matrix backtest
        run: |
          python scripts/run_matrix_backtest.py \
            --input "$BACKTEST_INPUT" \
            --outdir outputs \
            --bands "${{ github.event.inputs.bands }}" \
            --stake-mode "${{ github.event.inputs.stake_mode }}" \
            --edge "${{ github.event.inputs.edge }}" \
            --kelly-scale "${{ github.event.inputs.kelly_scale }}" \
            --flat-stake "${{ github.event.inputs.flat_stake }}" \
            --bankroll "${{ github.event.inputs.bankroll }}"

      - name: Job summary (top config by ROI)
        run: |
          echo 'import json, pathlib
p = pathlib.Path("outputs/backtest_metrics.json")
j = json.loads(p.read_text())
b = j.get("best_by_roi") or {}
def fmt(x): return "-" if x is None else (f"{x:.4f}" if isinstance(x, float) else str(x))
lines = ["## Matrix Backtest â€” Best by ROI",""]
if b:
    lines += [
      f"- **Config**: `{b.get("config_id","")}`",
      f"- **Band**: {b.get("label","")}",
      f"- **ROI**: {fmt(b.get("roi"))}",
      f"- **Bets**: {b.get("bets","-")} | **Hit-rate**: {fmt(b.get("hit_rate"))}",
      f"- **Turnover**: {fmt(b.get("turnover"))} | **PnL**: {fmt(b.get("pnl"))}",
      f"- **End bankroll**: {fmt(b.get("end_bankroll"))} | **Max DD**: {fmt(b.get("max_drawdown"))}",
    ]
else:
    lines.append("_No configs produced bets (likely Kelly=0 across bands)._")
open("summary.md","w").write("\\n".join(lines))
' > summarize.py
          python summarize.py
          cat summary.md >> "$GITHUB_STEP_SUMMARY"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: matrix_backtest_outputs
          path: |
            outputs/results.csv
            outputs/matrix_rankings.csv
            outputs/backtest_metrics.json
          if-no-files-found: warn
