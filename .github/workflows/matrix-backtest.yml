name: Matrix Backtest (Kelly + TE)

on:
  workflow_dispatch:
    inputs:
      dataset:
        description: "CSV to backtest (leave empty to auto-detect/build)"
        required: false
        default: ""
      bands:
        description: "Odds bands (pipe-separated groups)"
        required: true
        default: "2.0,2.6|2.6,3.2|3.2,4.0"
      staking:
        description: "Staking method (kelly|flat)"
        required: true
        default: "kelly"
      kelly_scale:
        description: "Kelly scale (0.5 = half Kelly)"
        required: true
        default: "0.5"
      bankroll:
        description: "Starting bankroll (units)"
        required: true
        default: "1000"
      min_edge:
        description: "Minimum edge threshold"
        required: true
        default: "0.02"
      vig_method:
        description: "Vig removal method (shin|wpe|none)"
        required: true
        default: "shin"

env:
  PYTHONUNBUFFERED: "1"

jobs:
  backtest:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          mkdir -p data/raw/odds outputs results/backtests/logs docs/backtests

      # 1) Resolve dataset path
      - name: Resolve dataset path
        id: resolve
        run: |
          set -e
          NEED_SYNTH=0
          CAND=""
          if [ -n "${{ inputs.dataset }}" ] && [ -f "${{ inputs.dataset }}" ]; then
            CAND="${{ inputs.dataset }}"
          fi
          if [ -z "$CAND" ] && [ -f "outputs/prob_enriched.csv" ]; then
            CAND="outputs/prob_enriched.csv"
          fi
          if [ -z "$CAND" ] && [ -f "data/raw/vigfree_matches.csv" ]; then
            CAND="data/raw/vigfree_matches.csv"
          fi
          if [ -z "$CAND" ]; then NEED_SYNTH=1; fi
          echo "file=$CAND" >> "$GITHUB_OUTPUT"
          echo "need_synth=$NEED_SYNTH" >> "$GITHUB_OUTPUT"
          echo "Resolved file='$CAND' need_synth=$NEED_SYNTH"

      # 2) Build minimal dataset if needed
      - name: Build synthetic dataset from sample_odds
        if: steps.resolve.outputs.need_synth == '1'
        run: |
          set -e
          test -f data/raw/odds/sample_odds.csv || { echo "Missing data/raw/odds/sample_odds.csv"; exit 1; }
          python scripts/compute_prob_vigfree.py \
            --input  data/raw/odds/sample_odds.csv \
            --output data/raw/vigfree_matches.csv \
            --method "${{ inputs.vig_method }}"
          python scripts/check_probabilities.py \
            --input  data/raw/vigfree_matches.csv \
            --output outputs/prob_enriched.csv
          echo "Built outputs/prob_enriched.csv"

      - name: Choose dataset for enrich/backtest
        id: choose
        run: |
          set -e
          FILE="${{ steps.resolve.outputs.file }}"
          if [ -z "$FILE" ]; then FILE="outputs/prob_enriched.csv"; fi
          test -f "$FILE" || { echo "Expected dataset '$FILE' not found"; exit 1; }
          echo "file=$FILE" >> "$GITHUB_OUTPUT"
          echo "Using dataset: $FILE"

      # 3) Enrich edges (FIXED arg name: --method)
      - name: Enrich edges (EdgeSmith)
        run: |
          set -e
          python scripts/edge_smith_enrich.py \
            --input  "${{ steps.choose.outputs.file }}" \
            --output outputs/edge_enriched.csv \
            --min-edge "${{ inputs.min_edge }}" \
            --method "${{ inputs.vig_method }}"
          echo "Enriched -> outputs/edge_enriched.csv"

      # 4) Matrix backtest
      - name: Run matrix backtest
        run: |
          set -e
          python scripts/matrix_backtest.py \
            --input outputs/edge_enriched.csv \
            --bands "${{ inputs.bands }}" \
            --staking "${{ inputs.staking }}" \
            --kelly-scale "${{ inputs.kelly_scale }}" \
            --bankroll "${{ inputs.bankroll }}" \
            --logs-dir results/backtests/logs \
            --summary-csv results/backtests/summary.csv
          echo "Summary -> results/backtests/summary.csv"

      # 5) HTML report
      - name: Summarize
        run: |
          set -e
          python scripts/generate_report.py \
            --mode backtest \
            --input outputs/edge_enriched.csv \
            --summary results/backtests/summary.csv \
            --logs-dir results/backtests/logs \
            --out docs/backtests/index.html
          echo "Report -> docs/backtests/index.html"

      # 6) Artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: matrix-backtest-${{ github.run_id }}
          path: |
            outputs/edge_enriched.csv
            outputs/prob_enriched.csv
            data/raw/vigfree_matches.csv
            results/backtests/**
            docs/backtests/index.html
